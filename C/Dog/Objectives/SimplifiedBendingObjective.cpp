#include "SimplifiedBendingObjective.h"

double SimplifiedBendingObjective::obj(const Eigen::VectorXd& x) {
  double e = 0;
  int vnum = x.rows()/3;
    
  //cout << "here" << endl;
  for (int si = 0; si < quadTop.stars.rows(); si+=5) {

		// get once the x neighbours and once the y neighbours
		for (int coords_i = 0; coords_i < 2; coords_i++) {
				//int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);
			int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1+coords_i), p_xb_i = quadTop.stars(si+3+coords_i);

			const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
			const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
			const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

			double t2 = p0_x*-2.0+pxb_x+pxf_x;
			double t3 = p0_y*-2.0+pxb_y+pxf_y;
			double t4 = p0_z*-2.0+pxb_z+pxf_z;
			double t5 = p0_x-pxb_x;
			double t6 = p0_y-pxb_y;
			double t7 = p0_z-pxb_z;
			double t8 = p0_x-pxf_x;
			double t9 = p0_y-pxf_y;
			double t10 = p0_z-pxf_z;
			e += (t2*t2+t3*t3+t4*t4)*1.0/pow(t5*t5+t6*t6+t7*t7+t8*t8+t9*t9+t10*t10,4.0)*2.56E2;
		}
	}

  for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
    int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_xb_i = quadTop.bnd3(si+3);
    const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
    const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
    const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

	double t2 = p0_x*-2.0+pxb_x+pxf_x;
	double t3 = p0_y*-2.0+pxb_y+pxf_y;
	double t4 = p0_z*-2.0+pxb_z+pxf_z;
	double t5 = p0_x-pxb_x;
	double t6 = p0_y-pxb_y;
	double t7 = p0_z-pxb_z;
	double t8 = p0_x-pxf_x;
	double t9 = p0_y-pxf_y;
	double t10 = p0_z-pxf_z;
	e += (t2*t2+t3*t3+t4*t4)*1.0/pow(t5*t5+t6*t6+t7*t7+t8*t8+t9*t9+t10*t10,4.0)*2.56E2;
  }
  //cout << "e = " << e << endl;
  return e;
}

Eigen::VectorXd SimplifiedBendingObjective::grad(const Eigen::VectorXd& x) {
  Eigen::VectorXd grad;
  grad.resize(x.rows(),1); grad.setZero();
  int vnum = x.rows()/3;
  int v_num = vnum;
  
  #pragma clang loop vectorize(enable)
  for (int si = 0; si < quadTop.stars.rows(); si+=5) {
        // get once the x neighbours and once the y neighbours
		for (int coords_i = 0; coords_i < 2; coords_i++) {
				//int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);
			int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1+coords_i), p_xb_i = quadTop.stars(si+3+coords_i);

			const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
			const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
			const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

			double t2 = p0_x-pxb_x;
			double t3 = p0_y-pxb_y;
			double t4 = p0_z-pxb_z;
			double t5 = p0_x-pxf_x;
			double t6 = p0_y-pxf_y;
			double t7 = p0_z-pxf_z;
			double t19 = p0_x*2.0;
			double t8 = pxb_x+pxf_x-t19;
			double t21 = p0_y*2.0;
			double t9 = pxb_y+pxf_y-t21;
			double t23 = p0_z*2.0;
			double t10 = pxb_z+pxf_z-t23;
			double t11 = t2*t2;
			double t12 = t3*t3;
			double t13 = t4*t4;
			double t14 = t5*t5;
			double t15 = t6*t6;
			double t16 = t7*t7;
			double t17 = t11+t12+t13+t14+t15+t16;
			double t18 = 1.0/(t17*t17*t17*t17);
			double t20 = t8*t8;
			double t22 = t9*t9;
			double t24 = t10*t10;
			double t25 = t20+t22+t24;
			double t26 = 1.0/(t17*t17*t17*t17*t17);
			double t27 = pxb_x*2.0;
			double t28 = pxf_x*2.0;
			double t36 = p0_x*4.0;
			double t29 = t27+t28-t36;
			double t30 = pxb_y*2.0;
			double t31 = pxf_y*2.0;
			double t38 = p0_y*4.0;
			double t32 = t30+t31-t38;
			double t33 = pxb_z*2.0;
			double t34 = pxf_z*2.0;
			double t40 = p0_z*4.0;
			double t35 = t33+t34-t40;
			double t37 = t18*t29*2.56E2;
			double t39 = t18*t32*2.56E2;
			double t41 = t18*t35*2.56E2;

			grad(p_0_i) += t18*(p0_x*-8.0+pxb_x*4.0+pxf_x*4.0)*-2.56E2+t25*t26*t29*1.024E3;
			grad(p_0_i+v_num) += t18*(p0_y*-8.0+pxb_y*4.0+pxf_y*4.0)*-2.56E2+t25*t26*t32*1.024E3;
			grad(p_0_i+2*v_num) += t18*(p0_z*-8.0+pxb_z*4.0+pxf_z*4.0)*-2.56E2+t25*t26*t35*1.024E3;
			grad(p_xb_i+0) += t37+t25*t26*(t19-t27)*1.024E3;
			grad(p_xb_i+v_num) += t39+t25*t26*(t21-t30)*1.024E3;
			grad(p_xb_i+2*v_num) += t41+t25*t26*(t23-t33)*1.024E3;
			grad(p_xf_i) += t37+t25*t26*(t19-t28)*1.024E3;
			grad(p_xf_i+v_num) += t39+t25*t26*(t21-t31)*1.024E3;
			grad(p_xf_i+2*v_num) += t41+t25*t26*(t23-t34)*1.024E3;

		}
    //}
  }

  for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
	int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_yf_i = quadTop.bnd3(si+2), p_xb_i = quadTop.bnd3(si+3);
	const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
	const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum));  const double p0_z(x(p_0_i+2*vnum));
	const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

			double t2 = p0_x-pxb_x;
			double t3 = p0_y-pxb_y;
			double t4 = p0_z-pxb_z;
			double t5 = p0_x-pxf_x;
			double t6 = p0_y-pxf_y;
			double t7 = p0_z-pxf_z;
			double t19 = p0_x*2.0;
			double t8 = pxb_x+pxf_x-t19;
			double t21 = p0_y*2.0;
			double t9 = pxb_y+pxf_y-t21;
			double t23 = p0_z*2.0;
			double t10 = pxb_z+pxf_z-t23;
			double t11 = t2*t2;
			double t12 = t3*t3;
			double t13 = t4*t4;
			double t14 = t5*t5;
			double t15 = t6*t6;
			double t16 = t7*t7;
			double t17 = t11+t12+t13+t14+t15+t16;
			double t18 = 1.0/(t17*t17*t17*t17);
			double t20 = t8*t8;
			double t22 = t9*t9;
			double t24 = t10*t10;
			double t25 = t20+t22+t24;
			double t26 = 1.0/(t17*t17*t17*t17*t17);
			double t27 = pxb_x*2.0;
			double t28 = pxf_x*2.0;
			double t36 = p0_x*4.0;
			double t29 = t27+t28-t36;
			double t30 = pxb_y*2.0;
			double t31 = pxf_y*2.0;
			double t38 = p0_y*4.0;
			double t32 = t30+t31-t38;
			double t33 = pxb_z*2.0;
			double t34 = pxf_z*2.0;
			double t40 = p0_z*4.0;
			double t35 = t33+t34-t40;
			double t37 = t18*t29*2.56E2;
			double t39 = t18*t32*2.56E2;
			double t41 = t18*t35*2.56E2;

			grad(p_0_i) += t18*(p0_x*-8.0+pxb_x*4.0+pxf_x*4.0)*-2.56E2+t25*t26*t29*1.024E3;
			grad(p_0_i+v_num) += t18*(p0_y*-8.0+pxb_y*4.0+pxf_y*4.0)*-2.56E2+t25*t26*t32*1.024E3;
			grad(p_0_i+2*v_num) += t18*(p0_z*-8.0+pxb_z*4.0+pxf_z*4.0)*-2.56E2+t25*t26*t35*1.024E3;
			grad(p_xb_i+0) += t37+t25*t26*(t19-t27)*1.024E3;
			grad(p_xb_i+v_num) += t39+t25*t26*(t21-t30)*1.024E3;
			grad(p_xb_i+2*v_num) += t41+t25*t26*(t23-t33)*1.024E3;
			grad(p_xf_i) += t37+t25*t26*(t19-t28)*1.024E3;
			grad(p_xf_i+v_num) += t39+t25*t26*(t21-t31)*1.024E3;
			grad(p_xf_i+2*v_num) += t41+t25*t26*(t23-t34)*1.024E3;
  }
  // TODO: maybe add corners (or 4 vertices boundaries for cuts)
  //cout << "3 new grad.norm() = " << grad.norm() << endl; //exit(1);
  return grad;
}

Eigen::SparseMatrix<double> SimplifiedBendingObjective::hessian(const Eigen::VectorXd& x) {
	Eigen::SparseMatrix<double> hessian(x.rows(),x.rows());
	std::vector<Eigen::Triplet<double> > IJV;
	// Almost every vertex has 2 constraints, each involves 2 of his neighbours (so 9*9 hessians) all of its neighbours constraints involving
	IJV.reserve(2*9*9*x.rows());
	int vnum = x.rows()/3;

	#pragma clang loop vectorize(enable)
  	for (int si = 0; si < quadTop.stars.rows(); si+=5) {
        // get once the x neighbours and once the y neighbours
		for (int coords_i = 0; coords_i < 2; coords_i++) {
				//int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);
			int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1+coords_i), p_xb_i = quadTop.stars(si+3+coords_i);

			const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
			const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
			const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

			double t2 = p0_x-pxb_x;
			double t3 = p0_y-pxb_y;
			double t4 = p0_z-pxb_z;
			double t5 = p0_x-pxf_x;
			double t6 = p0_y-pxf_y;
			double t7 = p0_z-pxf_z;
			double t19 = p0_x*2.0;
			double t8 = pxb_x+pxf_x-t19;
			double t21 = p0_y*2.0;
			double t9 = pxb_y+pxf_y-t21;
			double t23 = p0_z*2.0;
			double t10 = pxb_z+pxf_z-t23;
			double t11 = t2*t2;
			double t12 = t3*t3;
			double t13 = t4*t4;
			double t14 = t5*t5;
			double t15 = t6*t6;
			double t16 = t7*t7;
			double t17 = t11+t12+t13+t14+t15+t16;
			double t18 = 1.0/(t17*t17*t17*t17*t17);
			double t20 = t8*t8;
			double t22 = t9*t9;
			double t24 = t10*t10;
			double t25 = t20+t22+t24;
			double t26 = pxb_x*2.0;
			double t27 = pxf_x*2.0;
			double t29 = p0_x*4.0;
			double t28 = t26+t27-t29;
			double t30 = pxb_x*4.0;
			double t31 = pxf_x*4.0;
			double t37 = p0_x*8.0;
			double t32 = t30+t31-t37;
			double t33 = pxb_y*2.0;
			double t34 = pxf_y*2.0;
			double t44 = p0_y*4.0;
			double t35 = t33+t34-t44;
			double t36 = 1.0/(t17*t17*t17*t17*t17*t17);
			double t38 = pxb_z*2.0;
			double t39 = pxf_z*2.0;
			double t46 = p0_z*4.0;
			double t40 = t38+t39-t46;
			double t41 = t28*t28;
			double t42 = 1.0/(t17*t17*t17*t17);
			double t43 = t19-t26;
			double t45 = t21-t33;
			double t47 = t23-t38;
			double t48 = t18*t41*1.024E3;
			double t49 = t18*t25*2.048E3;
			double t50 = t19-t27;
			double t51 = t18*t28*t35*1.024E3;
			double t52 = t21-t34;
			double t53 = t18*t28*t40*1.024E3;
			double t54 = t23-t39;
			double t55 = pxb_y*4.0;
			double t56 = pxf_y*4.0;
			double t61 = p0_y*8.0;
			double t57 = t55+t56-t61;
			double t58 = t25*t28*t35*t36*5.12E3;
			double t59 = t58-t18*t32*t35*1.024E3-t18*t28*t57*1.024E3;
			double t60 = t42*2.048E3;
			double t62 = pxb_z*4.0;
			double t63 = pxf_z*4.0;
			double t68 = p0_z*8.0;
			double t64 = t62+t63-t68;
			double t65 = t35*t35;
			double t66 = t18*t65*1.024E3;
			double t67 = t18*t35*t40*1.024E3;
			double t69 = t25*t28*t36*t40*5.12E3;
			double t70 = t69-t18*t32*t40*1.024E3-t18*t28*t64*1.024E3;
			double t71 = t25*t35*t36*t40*5.12E3;
			double t72 = t71-t18*t40*t57*1.024E3-t18*t35*t64*1.024E3;
			double t73 = t40*t40;
			double t74 = t18*t73*1.024E3;
			double t75 = t25*t28*t36*t43*5.12E3;
			double t86 = t42*1.024E3;
			double t76 = t48+t49+t75-t86-t18*t32*t43*1.024E3;
			double t77 = t25*t35*t36*t43*5.12E3;
			double t78 = t51+t77-t18*t43*t57*1.024E3;
			double t79 = t25*t36*t40*t43*5.12E3;
			double t80 = t53+t79-t18*t43*t64*1.024E3;
			double t81 = t42*5.12E2;
			double t82 = t18*t35*t43*1.024E3;
			double t83 = t18*t40*t43*1.024E3;
			double t84 = t25*t28*t36*t45*5.12E3;
			double t85 = t51+t84-t18*t32*t45*1.024E3;
			double t87 = t25*t35*t36*t45*5.12E3;
			double t88 = t25*t36*t40*t45*5.12E3;
			double t89 = t67+t88-t18*t45*t64*1.024E3;
			double t90 = t18*t28*t45*1.024E3;
			double t91 = t25*t36*t43*t45*5.12E3;
			double t92 = t82+t90+t91;
			double t93 = t18*t40*t45*1.024E3;
			double t94 = t25*t28*t36*t47*5.12E3;
			double t95 = t53+t94-t18*t32*t47*1.024E3;
			double t96 = t25*t35*t36*t47*5.12E3;
			double t97 = t67+t96-t18*t47*t57*1.024E3;
			double t98 = t25*t36*t40*t47*5.12E3;
			double t99 = t18*t28*t47*1.024E3;
			double t100 = t25*t36*t43*t47*5.12E3;
			double t101 = t83+t99+t100;
			double t102 = t18*t35*t47*1.024E3;
			double t103 = t25*t36*t45*t47*5.12E3;
			double t104 = t93+t102+t103;
			double t105 = t25*t28*t36*t50*5.12E3;
			double t106 = t25*t35*t36*t50*5.12E3;
			double t107 = t51+t106-t18*t50*t57*1.024E3;
			double t108 = t25*t36*t40*t50*5.12E3;
			double t109 = t53+t108-t18*t50*t64*1.024E3;
			double t110 = t18*t28*t43*1.024E3;
			double t111 = t18*t28*t50*1.024E3;
			double t112 = t25*t36*t43*t50*5.12E3;
			double t113 = t81+t110+t111+t112;
			double t114 = t18*t35*t50*1.024E3;
			double t115 = t25*t36*t45*t50*5.12E3;
			double t116 = t90+t114+t115;
			double t117 = t18*t40*t50*1.024E3;
			double t118 = t25*t36*t47*t50*5.12E3;
			double t119 = t99+t117+t118;
			double t120 = t18*t28*t52*1.024E3;
			double t121 = t18*t28*t54*1.024E3;
			double t122 = t25*t28*t36*t52*5.12E3;
			double t123 = t51+t122-t18*t32*t52*1.024E3;
			double t124 = t25*t35*t36*t52*5.12E3;
			double t125 = t25*t36*t40*t52*5.12E3;
			double t126 = t67+t125-t18*t52*t64*1.024E3;
			double t127 = t25*t36*t43*t52*5.12E3;
			double t128 = t82+t120+t127;
			double t129 = t18*t35*t45*1.024E3;
			double t130 = t18*t35*t52*1.024E3;
			double t131 = t25*t36*t45*t52*5.12E3;
			double t132 = t81+t129+t130+t131;
			double t133 = t18*t40*t52*1.024E3;
			double t134 = t25*t36*t47*t52*5.12E3;
			double t135 = t102+t133+t134;
			double t136 = t25*t36*t50*t52*5.12E3;
			double t137 = t114+t120+t136;
			double t138 = t18*t35*t54*1.024E3;
			double t139 = t25*t28*t36*t54*5.12E3;
			double t140 = t53+t139-t18*t32*t54*1.024E3;
			double t141 = t25*t35*t36*t54*5.12E3;
			double t142 = t67+t141-t18*t54*t57*1.024E3;
			double t143 = t25*t36*t40*t54*5.12E3;
			double t144 = t25*t36*t43*t54*5.12E3;
			double t145 = t83+t121+t144;
			double t146 = t25*t36*t45*t54*5.12E3;
			double t147 = t93+t138+t146;
			double t148 = t18*t40*t47*1.024E3;
			double t149 = t18*t40*t54*1.024E3;
			double t150 = t25*t36*t47*t54*5.12E3;
			double t151 = t81+t148+t149+t150;
			double t152 = t25*t36*t50*t54*5.12E3;
			double t153 = t117+t121+t152;
			double t154 = t25*t36*t52*t54*5.12E3;
			double t155 = t133+t138+t154;

			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i, t60-t18*t25*4.096E3-t18*t28*t32*2.048E3+t25*t36*t41*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i+vnum, t59));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i+2*vnum, t70));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i, t76));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i+vnum, t85));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i+2*vnum, t95));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i, t42*-1.024E3+t48+t49+t105-t18*t32*t50*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i+vnum, t123));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i+2*vnum, t140));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i, t59));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i+vnum, t60-t18*t25*4.096E3-t18*t35*t57*2.048E3+t25*t36*t65*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i+2*vnum, t72));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i, t78));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+vnum, t42*-1.024E3+t49+t66+t87-t18*t45*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+2*vnum, t97));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i, t107));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+vnum, t42*-1.024E3+t49+t66+t124-t18*t52*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+2*vnum, t142));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i, t70));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+vnum, t72));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+2*vnum, t60-t18*t25*4.096E3-t18*t40*t64*2.048E3+t25*t36*t73*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i, t80));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+vnum, t89));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+2*vnum, t42*-1.024E3+t49+t74+t98-t18*t47*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i, t109));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+vnum, t126));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+2*vnum, t42*-1.024E3+t49+t74+t143-t18*t54*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i, t76));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i+vnum, t78));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i+2*vnum, t80));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i, -t49+t81+t25*t36*(t43*t43)*5.12E3+t18*t28*t43*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i+vnum, t92));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i+2*vnum, t101));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i, t113));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i+vnum, t128));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i+2*vnum, t145));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i, t85));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+vnum, t49+t66-t86+t87-t18*t45*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+2*vnum, t89));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i, t92));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+vnum, -t49+t81+t25*t36*(t45*t45)*5.12E3+t18*t35*t45*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+2*vnum, t104));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i, t116));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i+vnum, t132));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i+2*vnum, t147));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i, t95));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+vnum, t97));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+2*vnum, t49+t74-t86+t98-t18*t47*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i, t101));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+vnum, t104));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+2*vnum, -t49+t81+t25*t36*(t47*t47)*5.12E3+t18*t40*t47*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i, t119));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i+vnum, t135));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i+2*vnum, t151));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i, t48+t49-t86+t105-t18*t32*t50*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i+vnum, t107));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i+2*vnum, t109));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i, t113));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i+vnum, t116));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i+2*vnum, t119));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i, -t49+t81+t25*t36*(t50*t50)*5.12E3+t18*t28*t50*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i+vnum, t137));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i+2*vnum, t153));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i, t123));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+vnum, t49+t66-t86+t124-t18*t52*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+2*vnum, t126));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i, t128));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i+vnum, t132));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i+2*vnum, t135));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i, t137));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+vnum, -t49+t81+t25*t36*(t52*t52)*5.12E3+t18*t35*t52*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+2*vnum, t155));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i, t140));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+vnum, t142));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+2*vnum, t49+t74-t86+t143-t18*t54*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i, t145));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i+vnum, t147));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i+2*vnum, t151));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i, t153));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+vnum, t155));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+2*vnum, -t49+t81+t25*t36*(t54*t54)*5.12E3+t18*t40*t54*2.048E3));


		}
	}

	for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
		int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_yf_i = quadTop.bnd3(si+2), p_xb_i = quadTop.bnd3(si+3);
		const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
		const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum));  const double p0_z(x(p_0_i+2*vnum));
		const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));

			double t2 = p0_x-pxb_x;
			double t3 = p0_y-pxb_y;
			double t4 = p0_z-pxb_z;
			double t5 = p0_x-pxf_x;
			double t6 = p0_y-pxf_y;
			double t7 = p0_z-pxf_z;
			double t19 = p0_x*2.0;
			double t8 = pxb_x+pxf_x-t19;
			double t21 = p0_y*2.0;
			double t9 = pxb_y+pxf_y-t21;
			double t23 = p0_z*2.0;
			double t10 = pxb_z+pxf_z-t23;
			double t11 = t2*t2;
			double t12 = t3*t3;
			double t13 = t4*t4;
			double t14 = t5*t5;
			double t15 = t6*t6;
			double t16 = t7*t7;
			double t17 = t11+t12+t13+t14+t15+t16;
			double t18 = 1.0/(t17*t17*t17*t17*t17);
			double t20 = t8*t8;
			double t22 = t9*t9;
			double t24 = t10*t10;
			double t25 = t20+t22+t24;
			double t26 = pxb_x*2.0;
			double t27 = pxf_x*2.0;
			double t29 = p0_x*4.0;
			double t28 = t26+t27-t29;
			double t30 = pxb_x*4.0;
			double t31 = pxf_x*4.0;
			double t37 = p0_x*8.0;
			double t32 = t30+t31-t37;
			double t33 = pxb_y*2.0;
			double t34 = pxf_y*2.0;
			double t44 = p0_y*4.0;
			double t35 = t33+t34-t44;
			double t36 = 1.0/(t17*t17*t17*t17*t17*t17);
			double t38 = pxb_z*2.0;
			double t39 = pxf_z*2.0;
			double t46 = p0_z*4.0;
			double t40 = t38+t39-t46;
			double t41 = t28*t28;
			double t42 = 1.0/(t17*t17*t17*t17);
			double t43 = t19-t26;
			double t45 = t21-t33;
			double t47 = t23-t38;
			double t48 = t18*t41*1.024E3;
			double t49 = t18*t25*2.048E3;
			double t50 = t19-t27;
			double t51 = t18*t28*t35*1.024E3;
			double t52 = t21-t34;
			double t53 = t18*t28*t40*1.024E3;
			double t54 = t23-t39;
			double t55 = pxb_y*4.0;
			double t56 = pxf_y*4.0;
			double t61 = p0_y*8.0;
			double t57 = t55+t56-t61;
			double t58 = t25*t28*t35*t36*5.12E3;
			double t59 = t58-t18*t32*t35*1.024E3-t18*t28*t57*1.024E3;
			double t60 = t42*2.048E3;
			double t62 = pxb_z*4.0;
			double t63 = pxf_z*4.0;
			double t68 = p0_z*8.0;
			double t64 = t62+t63-t68;
			double t65 = t35*t35;
			double t66 = t18*t65*1.024E3;
			double t67 = t18*t35*t40*1.024E3;
			double t69 = t25*t28*t36*t40*5.12E3;
			double t70 = t69-t18*t32*t40*1.024E3-t18*t28*t64*1.024E3;
			double t71 = t25*t35*t36*t40*5.12E3;
			double t72 = t71-t18*t40*t57*1.024E3-t18*t35*t64*1.024E3;
			double t73 = t40*t40;
			double t74 = t18*t73*1.024E3;
			double t75 = t25*t28*t36*t43*5.12E3;
			double t86 = t42*1.024E3;
			double t76 = t48+t49+t75-t86-t18*t32*t43*1.024E3;
			double t77 = t25*t35*t36*t43*5.12E3;
			double t78 = t51+t77-t18*t43*t57*1.024E3;
			double t79 = t25*t36*t40*t43*5.12E3;
			double t80 = t53+t79-t18*t43*t64*1.024E3;
			double t81 = t42*5.12E2;
			double t82 = t18*t35*t43*1.024E3;
			double t83 = t18*t40*t43*1.024E3;
			double t84 = t25*t28*t36*t45*5.12E3;
			double t85 = t51+t84-t18*t32*t45*1.024E3;
			double t87 = t25*t35*t36*t45*5.12E3;
			double t88 = t25*t36*t40*t45*5.12E3;
			double t89 = t67+t88-t18*t45*t64*1.024E3;
			double t90 = t18*t28*t45*1.024E3;
			double t91 = t25*t36*t43*t45*5.12E3;
			double t92 = t82+t90+t91;
			double t93 = t18*t40*t45*1.024E3;
			double t94 = t25*t28*t36*t47*5.12E3;
			double t95 = t53+t94-t18*t32*t47*1.024E3;
			double t96 = t25*t35*t36*t47*5.12E3;
			double t97 = t67+t96-t18*t47*t57*1.024E3;
			double t98 = t25*t36*t40*t47*5.12E3;
			double t99 = t18*t28*t47*1.024E3;
			double t100 = t25*t36*t43*t47*5.12E3;
			double t101 = t83+t99+t100;
			double t102 = t18*t35*t47*1.024E3;
			double t103 = t25*t36*t45*t47*5.12E3;
			double t104 = t93+t102+t103;
			double t105 = t25*t28*t36*t50*5.12E3;
			double t106 = t25*t35*t36*t50*5.12E3;
			double t107 = t51+t106-t18*t50*t57*1.024E3;
			double t108 = t25*t36*t40*t50*5.12E3;
			double t109 = t53+t108-t18*t50*t64*1.024E3;
			double t110 = t18*t28*t43*1.024E3;
			double t111 = t18*t28*t50*1.024E3;
			double t112 = t25*t36*t43*t50*5.12E3;
			double t113 = t81+t110+t111+t112;
			double t114 = t18*t35*t50*1.024E3;
			double t115 = t25*t36*t45*t50*5.12E3;
			double t116 = t90+t114+t115;
			double t117 = t18*t40*t50*1.024E3;
			double t118 = t25*t36*t47*t50*5.12E3;
			double t119 = t99+t117+t118;
			double t120 = t18*t28*t52*1.024E3;
			double t121 = t18*t28*t54*1.024E3;
			double t122 = t25*t28*t36*t52*5.12E3;
			double t123 = t51+t122-t18*t32*t52*1.024E3;
			double t124 = t25*t35*t36*t52*5.12E3;
			double t125 = t25*t36*t40*t52*5.12E3;
			double t126 = t67+t125-t18*t52*t64*1.024E3;
			double t127 = t25*t36*t43*t52*5.12E3;
			double t128 = t82+t120+t127;
			double t129 = t18*t35*t45*1.024E3;
			double t130 = t18*t35*t52*1.024E3;
			double t131 = t25*t36*t45*t52*5.12E3;
			double t132 = t81+t129+t130+t131;
			double t133 = t18*t40*t52*1.024E3;
			double t134 = t25*t36*t47*t52*5.12E3;
			double t135 = t102+t133+t134;
			double t136 = t25*t36*t50*t52*5.12E3;
			double t137 = t114+t120+t136;
			double t138 = t18*t35*t54*1.024E3;
			double t139 = t25*t28*t36*t54*5.12E3;
			double t140 = t53+t139-t18*t32*t54*1.024E3;
			double t141 = t25*t35*t36*t54*5.12E3;
			double t142 = t67+t141-t18*t54*t57*1.024E3;
			double t143 = t25*t36*t40*t54*5.12E3;
			double t144 = t25*t36*t43*t54*5.12E3;
			double t145 = t83+t121+t144;
			double t146 = t25*t36*t45*t54*5.12E3;
			double t147 = t93+t138+t146;
			double t148 = t18*t40*t47*1.024E3;
			double t149 = t18*t40*t54*1.024E3;
			double t150 = t25*t36*t47*t54*5.12E3;
			double t151 = t81+t148+t149+t150;
			double t152 = t25*t36*t50*t54*5.12E3;
			double t153 = t117+t121+t152;
			double t154 = t25*t36*t52*t54*5.12E3;
			double t155 = t133+t138+t154;

			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i, t60-t18*t25*4.096E3-t18*t28*t32*2.048E3+t25*t36*t41*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i+vnum, t59));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_0_i+2*vnum, t70));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i, t76));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i+vnum, t85));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xb_i+2*vnum, t95));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i, t42*-1.024E3+t48+t49+t105-t18*t32*t50*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i+vnum, t123));
			IJV.push_back(Eigen::Triplet<double>(p_0_i,p_xf_i+2*vnum, t140));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i, t59));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i+vnum, t60-t18*t25*4.096E3-t18*t35*t57*2.048E3+t25*t36*t65*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_0_i+2*vnum, t72));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i, t78));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+vnum, t42*-1.024E3+t49+t66+t87-t18*t45*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+2*vnum, t97));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i, t107));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+vnum, t42*-1.024E3+t49+t66+t124-t18*t52*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+2*vnum, t142));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i, t70));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+vnum, t72));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+2*vnum, t60-t18*t25*4.096E3-t18*t40*t64*2.048E3+t25*t36*t73*5.12E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i, t80));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+vnum, t89));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+2*vnum, t42*-1.024E3+t49+t74+t98-t18*t47*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i, t109));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+vnum, t126));
			IJV.push_back(Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+2*vnum, t42*-1.024E3+t49+t74+t143-t18*t54*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i, t76));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i+vnum, t78));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_0_i+2*vnum, t80));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i, -t49+t81+t25*t36*(t43*t43)*5.12E3+t18*t28*t43*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i+vnum, t92));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xb_i+2*vnum, t101));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i, t113));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i+vnum, t128));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i,p_xf_i+2*vnum, t145));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i, t85));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+vnum, t49+t66-t86+t87-t18*t45*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+2*vnum, t89));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i, t92));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+vnum, -t49+t81+t25*t36*(t45*t45)*5.12E3+t18*t35*t45*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+2*vnum, t104));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i, t116));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i+vnum, t132));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+vnum,p_xf_i+2*vnum, t147));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i, t95));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+vnum, t97));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+2*vnum, t49+t74-t86+t98-t18*t47*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i, t101));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+vnum, t104));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+2*vnum, -t49+t81+t25*t36*(t47*t47)*5.12E3+t18*t40*t47*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i, t119));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i+vnum, t135));
			IJV.push_back(Eigen::Triplet<double>(p_xb_i+2*vnum,p_xf_i+2*vnum, t151));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i, t48+t49-t86+t105-t18*t32*t50*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i+vnum, t107));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_0_i+2*vnum, t109));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i, t113));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i+vnum, t116));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xb_i+2*vnum, t119));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i, -t49+t81+t25*t36*(t50*t50)*5.12E3+t18*t28*t50*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i+vnum, t137));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i,p_xf_i+2*vnum, t153));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i, t123));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+vnum, t49+t66-t86+t124-t18*t52*t57*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+2*vnum, t126));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i, t128));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i+vnum, t132));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xb_i+2*vnum, t135));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i, t137));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+vnum, -t49+t81+t25*t36*(t52*t52)*5.12E3+t18*t35*t52*2.048E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+2*vnum, t155));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i, t140));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+vnum, t142));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+2*vnum, t49+t74-t86+t143-t18*t54*t64*1.024E3));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i, t145));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i+vnum, t147));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xb_i+2*vnum, t151));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i, t153));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+vnum, t155));
			IJV.push_back(Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+2*vnum, -t49+t81+t25*t36*(t54*t54)*5.12E3+t18*t40*t54*2.048E3));
	}
	hessian.setFromTriplets(IJV.begin(),IJV.end());
	return hessian;
}