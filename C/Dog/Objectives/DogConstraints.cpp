#include "DogConstraints.h"

using namespace std;

DogConstraints::DogConstraints(const QuadTopology& quadTop, bool offset_planar) : 
					quadTop(quadTop), vnum(quadTop.v_n), offset_planar(offset_planar) {
	const_n= 3*(quadTop.stars.rows()/5)+1*quadTop.bnd3.rows()/4;
	IJV.resize(36*(quadTop.stars.rows()/5) + 12*(quadTop.bnd3.rows()/4));
	lambda_hessian_IJV.resize(189*(quadTop.stars.rows()/5) + 126*(quadTop.bnd3.rows()/4));
}

void DogConstraints::updateJacobianIJV(const Eigen::VectorXd& x) {
	// Add inner vertices constraints
	int const_cnt = 0; int ijv_idx = 0;
	for (int si = 0; si < quadTop.stars.rows(); si+=5) {
		int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);

		const double pyb_x(x(p_yb_i+0)); const double pyb_y(x(p_yb_i+1*vnum)); const double pyb_z(x(p_yb_i+2*vnum));
		const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
		double p0_x(x(p_0_i+0)); double p0_y(x(p_0_i+1*vnum)); double p0_z(x(p_0_i+2*vnum));
		const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
		const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));

		// pretube vertices a bit if they are planar
		if (offset_planar) {
			//cout << "offset_planar" << endl;
			double t3 = p0_x-pxb_x;
			double t4 = p0_y-pxb_y;
			double t5 = p0_z-pxb_z;
			double t6 = p0_x-pxf_x;
			double t7 = p0_y-pxf_y;
			double t8 = p0_z-pxf_z;
			double t9 = t3*t6;
			double t10 = t4*t7;
			double t11 = t5*t8;
			double t2 = t9+t10+t11; // dot product
			double t12 = t3*t3;
			double t13 = t4*t4;
			double t14 = t5*t5;
			double t15 = t12+t13+t14; //squared norm exb
			double t16 = 1.0/t15;
			double t17 = t6*t6;
			double t18 = t7*t7;
			double t19 = t8*t8;
			double t20 = t17+t18+t19; // squared norm exf
			double t21 = 1.0/t20;
			double t22 = t2*t2;
			double t23 = p0_x*2.0;
			
			double t28 = p0_x-pyb_x;
			double t29 = p0_y-pyb_y;
			double t30 = p0_z-pyb_z;
			double t31 = p0_x-pyf_x;
			double t32 = p0_y-pyf_y;
			double t33 = p0_z-pyf_z;
			double t34 = t28*t31;
			double t35 = t29*t32;
			double t36 = t30*t33;
			double t27 = t34+t35+t36; // dot produt
			double t37 = t28*t28;
			double t38 = t29*t29;
			double t39 = t30*t30;
			double t40 = t37+t38+t39; // square norm eyb
			double t41 = 1.0/t40;
			double t42 = t31*t31;
			double t43 = t32*t32;
			double t44 = t33*t33;
			double t45 = t42+t43+t44; // square norm eyf

			double eps = 1e-14;
			bool x_straight = false;
			if ((t2/sqrt(t15*t20) +1) <  eps ) {
				//cout << "x_straight" << endl;
				x_straight = true;
			}
			bool y_straight = false;
			if ((t27/sqrt(t40*t45) +1) <  eps ) {
				y_straight = true;
				//cout << "y_straight" << endl;
			}
			if (x_straight && y_straight) {
				Eigen::Vector3d e1,e2,n;
				e1 << t3,t4,t5; e2 << t31,t32,t33;
				n = e1.cross(e2).normalized();
				double f = (double)rand() / RAND_MAX;
				p0_x += (0.000001 + f * (0.000002 - 0.000001))*n(0);
				p0_y += (0.000001 + f * (0.000002 - 0.000001))*n(1);
				p0_z += (0.000001 + f * (0.000002 - 0.000001))*n(2);
				//p0_z += (0.01 + f * (0.02 - 0.01))*1;
			}
		}

		double t2 = p0_x-pxb_x;
		double t3 = p0_y-pxb_y;
		double t4 = p0_z-pxb_z;
		double t5 = p0_x-pxf_x;
		double t6 = p0_y-pxf_y;
		double t7 = p0_z-pxf_z;
		double t8 = t2*t2;
		double t9 = t3*t3;
		double t10 = t4*t4;
		double t11 = t8+t9+t10;
		double t12 = p0_x*2.0;
		double t13 = p0_x-pyf_x;
		double t14 = p0_y-pyf_y;
		double t15 = p0_z-pyf_z;
		double t16 = t5*t5;
		double t17 = t6*t6;
		double t18 = t7*t7;
		double t19 = t16+t17+t18;
		double t20 = sqrt(t11);
		double t21 = sqrt(t19);
		double t22 = t5*t13;
		double t23 = t6*t14;
		double t24 = t7*t15;
		double t25 = t22+t23+t24;
		double t26 = 1.0/sqrt(t11);
		double t27 = p0_y*2.0;
		double t28 = t2*t13;
		double t29 = t3*t14;
		double t30 = t4*t15;
		double t31 = t28+t29+t30;
		double t32 = 1.0/sqrt(t19);
		double t33 = p0_z*2.0;
		double t34 = pxb_x*2.0;
		double t35 = t12-t34;
		double t36 = t25*t26*t35*(1.0/2.0);
		double t37 = pxb_y*2.0;
		double t38 = t27-t37;
		double t39 = t25*t26*t38*(1.0/2.0);
		double t40 = pxb_z*2.0;
		double t41 = t33-t40;
		double t42 = t25*t26*t41*(1.0/2.0);
		double t43 = pxf_x*2.0;
		double t44 = t12-t43;
		double t45 = pxf_y*2.0;
		double t46 = t27-t45;
		double t47 = pxf_z*2.0;
		double t48 = t33-t47;
		double t49 = p0_x-pyb_x;
		double t50 = p0_y-pyb_y;
		double t51 = p0_z-pyb_z;
		double t52 = t49*t49;
		double t53 = t50*t50;
		double t54 = t51*t51;
		double t55 = t52+t53+t54;
		double t56 = t13*t13;
		double t57 = t14*t14;
		double t58 = t15*t15;
		double t59 = t56+t57+t58;
		double t60 = sqrt(t55);
		double t61 = sqrt(t59);
		double t62 = 1.0/sqrt(t55);
		double t63 = t2*t49;
		double t64 = t3*t50;
		double t65 = t4*t51;
		double t66 = t63+t64+t65;
		double t67 = 1.0/sqrt(t59);
		double t68 = pyb_x*2.0;
		double t69 = t12-t68;
		double t70 = t31*t62*t69*(1.0/2.0);
		double t71 = pyb_y*2.0;
		double t72 = t27-t71;
		double t73 = t31*t62*t72*(1.0/2.0);
		double t74 = pyb_z*2.0;
		double t75 = t33-t74;
		double t76 = t31*t62*t75*(1.0/2.0);
		double t77 = pyf_x*2.0;
		double t78 = t12-t77;
		double t79 = pyf_y*2.0;
		double t80 = t27-t79;
		double t81 = pyf_z*2.0;
		double t82 = t33-t81;
		double t83 = pxb_x+pyb_x-t12;
		double t84 = pxb_y+pyb_y-t27;
		double t85 = t5*t49;
		double t86 = t6*t50;
		double t87 = t7*t51;
		double t88 = t85+t86+t87;
		double t89 = pxb_z+pyb_z-t33;
		double t90 = t32*t44*t66*(1.0/2.0);
		double t91 = t32*t46*t66*(1.0/2.0);
		double t92 = t32*t48*t66*(1.0/2.0);
		double t93 = t2*t21;
		double t94 = t3*t21;
		double t95 = t4*t21;

		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i,t36+t21*(p0_x*-2.0+pxb_x+pyf_x)-t20*(p0_x*-2.0+pxf_x+pyf_x)-t31*t32*t44*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i+1*vnum,t39+t21*(p0_y*-2.0+pxb_y+pyf_y)-t20*(p0_y*-2.0+pxf_y+pyf_y)-t31*t32*t46*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i+2*vnum,t42+t21*(p0_z*-2.0+pxb_z+pyf_z)-t20*(p0_z*-2.0+pxf_z+pyf_z)-t31*t32*t48*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i,-t36+t13*t21);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i+1*vnum,-t39+t14*t21);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i+2*vnum,-t42+t15*t21);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i,-t13*t20+t31*t32*t44*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i+1*vnum,-t14*t20+t31*t32*t46*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i+2*vnum,-t15*t20+t31*t32*t48*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i,t93-t5*t20);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i+1*vnum,t94-t6*t20);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i+2*vnum,t95-t7*t20);

		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_0_i,t70+t61*t83-t60*(pxb_x+pyf_x-t12)-t66*t67*t78*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_0_i+1*vnum,t73+t61*t84-t60*(pxb_y+pyf_y-t27)-t66*t67*t80*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_0_i+2*vnum,t76+t61*t89-t60*(pxb_z+pyf_z-t33)-t66*t67*t82*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_xb_i,-t13*t60+t49*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_xb_i+1*vnum,-t14*t60+t50*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_xb_i+2*vnum,-t15*t60+t51*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yb_i,-t70+t2*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yb_i+1*vnum,-t73+t3*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yb_i+2*vnum,-t76+t4*t61);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yf_i,-t2*t60+t66*t67*t78*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yf_i+1*vnum,-t3*t60+t66*t67*t80*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+1,p_yf_i+2*vnum,-t4*t60+t66*t67*t82*(1.0/2.0));

		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_0_i,t90-t21*t83+t20*(pxf_x+pyb_x-t12)-t26*t35*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_0_i+1*vnum,t91-t21*t84+t20*(pxf_y+pyb_y-t27)-t26*t38*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_0_i+2*vnum,t92-t21*t89+t20*(pxf_z+pyb_z-t33)-t26*t41*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xb_i,-t21*t49+t26*t35*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xb_i+1*vnum,-t21*t50+t26*t38*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xb_i+2*vnum,-t21*t51+t26*t41*t88*(1.0/2.0));
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xf_i,-t90+t20*t49);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xf_i+1*vnum,-t91+t20*t50);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_xf_i+2*vnum,-t92+t20*t51);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_yb_i,-t93+t5*t20);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_yb_i+1*vnum,-t94+t6*t20);
		IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt+2,p_yb_i+2*vnum,-t95+t7*t20);

		const_cnt+=3;
    }

	// Add boundary 3
	    for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
		    int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_yf_i = quadTop.bnd3(si+2), p_xb_i = quadTop.bnd3(si+3);
		    const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
		    const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
		    const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
		    const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));
		    
		    double t2 = p0_x-pxb_x;
			double t3 = p0_y-pxb_y;
			double t4 = p0_z-pxb_z;
			double t5 = p0_x-pxf_x;
			double t6 = p0_y-pxf_y;
			double t7 = p0_z-pxf_z;
			double t8 = t2*t2;
			double t9 = t3*t3;
			double t10 = t4*t4;
			double t11 = t8+t9+t10;
			double t12 = p0_x*2.0;
			double t13 = p0_x-pyf_x;
			double t14 = p0_y-pyf_y;
			double t15 = p0_z-pyf_z;
			double t16 = t5*t5;
			double t17 = t6*t6;
			double t18 = t7*t7;
			double t19 = t16+t17+t18;
			double t20 = sqrt(t11);
			double t21 = sqrt(t19);
			double t22 = t5*t13;
			double t23 = t6*t14;
			double t24 = t7*t15;
			double t25 = t22+t23+t24;
			double t26 = 1.0/sqrt(t11);
			double t27 = p0_y*2.0;
			double t28 = t2*t13;
			double t29 = t3*t14;
			double t30 = t4*t15;
			double t31 = t28+t29+t30;
			double t32 = 1.0/sqrt(t19);
			double t33 = p0_z*2.0;
			double t34 = pxb_x*2.0;
			double t35 = t12-t34;
			double t36 = t25*t26*t35*(1.0/2.0);
			double t37 = pxb_y*2.0;
			double t38 = t27-t37;
			double t39 = t25*t26*t38*(1.0/2.0);
			double t40 = pxb_z*2.0;
			double t41 = t33-t40;
			double t42 = t25*t26*t41*(1.0/2.0);
			double t43 = pxf_x*2.0;
			double t44 = t12-t43;
			double t45 = pxf_y*2.0;
			double t46 = t27-t45;
			double t47 = pxf_z*2.0;
			double t48 = t33-t47;

			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i,t36+t21*(p0_x*-2.0+pxb_x+pyf_x)-t20*(p0_x*-2.0+pxf_x+pyf_x)-t31*t32*t44*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i+1*vnum,t39+t21*(p0_y*-2.0+pxb_y+pyf_y)-t20*(p0_y*-2.0+pxf_y+pyf_y)-t31*t32*t46*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_0_i+2*vnum,t42+t21*(p0_z*-2.0+pxb_z+pyf_z)-t20*(p0_z*-2.0+pxf_z+pyf_z)-t31*t32*t48*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i,-t36+t13*t21);
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i+1*vnum,-t39+t14*t21);
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xb_i+2*vnum,-t42+t15*t21);
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i,-t13*t20+t31*t32*t44*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i+1*vnum,-t14*t20+t31*t32*t46*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_xf_i+2*vnum,-t15*t20+t31*t32*t48*(1.0/2.0));
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i,t2*t21-t5*t20);
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i+1*vnum,t3*t21-t6*t20);
			IJV[ijv_idx++] = Eigen::Triplet<double>(const_cnt,p_yf_i+2*vnum,t4*t21-t7*t20);

			const_cnt++;
	  	}
	if (const_cnt != const_n) {
		cout << "error, const_cnt = " << const_cnt << " but const_n = " << const_n << endl;
		exit(1);
	}
}

Eigen::VectorXd DogConstraints::Vals(const Eigen::VectorXd& x) const {
	Eigen::VectorXd constVals(const_n); constVals.setZero();
	// Add inner vertices constraints
	int const_cnt = 0;
	for (int si = 0; si < quadTop.stars.rows(); si+=5) {
		int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);

		const double pyb_x(x(p_yb_i+0)); const double pyb_y(x(p_yb_i+1*vnum)); const double pyb_z(x(p_yb_i+2*vnum));
		const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
		const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
		const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
		const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));

		double t2 = p0_x-pxb_x;
		double t3 = p0_y-pxb_y;
		double t4 = p0_z-pxb_z;
		double t5 = p0_x-pyf_x;
		double t6 = p0_y-pyf_y;
		double t7 = p0_z-pyf_z;
		double t8 = p0_x-pxf_x;
		double t9 = p0_y-pxf_y;
		double t10 = p0_z-pxf_z;
		double t11 = t5*t5;
		double t12 = t6*t6;
		double t13 = t7*t7;
		double t14 = t11+t12+t13;
		double t15 = 1.0/sqrt(t14);
		double t16 = t2*t2;
		double t17 = t3*t3;
		double t18 = t4*t4;
		double t19 = t16+t17+t18;
		double t20 = 1.0/sqrt(t19);
		double t21 = p0_x-pyb_x;
		double t22 = p0_y-pyb_y;
		double t23 = p0_z-pyb_z;
		double t24 = t2*t5;
		double t25 = t3*t6;
		double t26 = t4*t7;
		double t27 = t24+t25+t26;
		double t28 = t2*t21;
		double t29 = t3*t22;
		double t30 = t4*t23;
		double t31 = t28+t29+t30;
		double t32 = t21*t21;
		double t33 = t22*t22;
		double t34 = t23*t23;
		double t35 = t32+t33+t34;
		double t36 = 1.0/sqrt(t35);
		double t37 = t8*t8;
		double t38 = t9*t9;
		double t39 = t10*t10;
		double t40 = t37+t38+t39;
		double t41 = 1.0/sqrt(t40);

		constVals(const_cnt) = t15*t41*(t5*t8+t6*t9+t7*t10)-t15*t20*t27;
  		constVals(const_cnt+1) = t15*t20*t27-t20*t31*t36;
  		constVals(const_cnt+2) = -t36*t41*(t8*t21+t9*t22+t10*t23)+t20*t31*t36;

		const_cnt+=3;
    }

    for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
	    int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_yf_i = quadTop.bnd3(si+2), p_xb_i = quadTop.bnd3(si+3);
	    const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
	    const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
	    const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
	    const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));
	    
	    double t2 = p0_x-pxb_x;
		double t3 = p0_y-pxb_y;
		double t4 = p0_z-pxb_z;
		double t5 = p0_x-pyf_x;
		double t6 = p0_y-pyf_y;
		double t7 = p0_z-pyf_z;
		double t8 = p0_x-pxf_x;
		double t9 = p0_y-pxf_y;
		double t10 = p0_z-pxf_z;
		double t11 = t5*t5;
		double t12 = t6*t6;
		double t13 = t7*t7;
		double t14 = t11+t12+t13;
		double t15 = 1.0/sqrt(t14);

		constVals(const_cnt) = -t15*(t2*t5+t3*t6+t4*t7)*1.0/sqrt(t2*t2+t3*t3+t4*t4)+t15*(t5*t8+t6*t9+t7*t10)*1.0/sqrt(t8*t8+t9*t9+t10*t10);
		const_cnt++;
	}
	if (const_cnt != const_n) {
		cout << "error, const_cnt = " << const_cnt << " but const_n = " << const_n << endl;
		exit(1);
	}
	return constVals;
}


void DogConstraints::updateLambdaHessianIJV(const Eigen::VectorXd& x, const Eigen::VectorXd& lambda) {
	// Add inner vertices constraints
	int ijv_idx = 0;
	int const_cnt = 0;
	for (int si = 0; si < quadTop.stars.rows(); si+=5) {
		int p_0_i = quadTop.stars(si), p_xf_i = quadTop.stars(si+1), p_yf_i = quadTop.stars(si+2), p_xb_i = quadTop.stars(si+3),p_yb_i = quadTop.stars(si+4);

		const double pyb_x(x(p_yb_i+0)); const double pyb_y(x(p_yb_i+1*vnum)); const double pyb_z(x(p_yb_i+2*vnum));
		const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
		const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
		const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
		const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));

		double lambda1 = lambda(const_cnt); double lambda2 = lambda(const_cnt+1); double lambda3 = lambda(const_cnt+2);

		double t2 = p0_x-pxb_x;
		double t3 = p0_y-pxb_y;
		double t4 = p0_z-pxb_z;
		double t5 = p0_x-pyb_x;
		double t6 = p0_y-pyb_y;
		double t7 = p0_z-pyb_z;
		double t8 = t2*t2;
		double t9 = t3*t3;
		double t10 = t4*t4;
		double t11 = t8+t9+t10;
		double t12 = 1.0/sqrt(t11);
		double t13 = p0_x-pyf_x;
		double t14 = p0_y-pyf_y;
		double t15 = p0_z-pyf_z;
		double t16 = t5*t5;
		double t17 = t6*t6;
		double t18 = t7*t7;
		double t19 = t16+t17+t18;
		double t20 = t2*t5;
		double t21 = t3*t6;
		double t22 = t4*t7;
		double t23 = t20+t21+t22;
		double t24 = 1.0/sqrt(t19);
		double t25 = t13*t13;
		double t26 = t14*t14;
		double t27 = t15*t15;
		double t28 = t25+t26+t27;
		double t29 = t2*t13;
		double t30 = t3*t14;
		double t31 = t4*t15;
		double t32 = t29+t30+t31;
		double t33 = 1.0/pow(t11,3.0/2.0);
		double t34 = 1.0/sqrt(t28);
		double t36 = p0_x*2.0;
		double t37 = pxb_x*2.0;
		double t35 = t36-t37;
		double t38 = t35*t35;
		double t39 = 1.0/pow(t11,5.0/2.0);
		double t42 = pyb_x*2.0;
		double t40 = -t36+t42;
		double t45 = pyf_x*2.0;
		double t41 = -t36+t45;
		double t43 = pxb_x+pyb_x-t36;
		double t44 = 1.0/pow(t19,3.0/2.0);
		double t46 = pxb_x+pyf_x-t36;
		double t47 = 1.0/pow(t28,3.0/2.0);
		double t48 = t36-t42;
		double t49 = t36-t45;
		double t50 = t12*t24*2.0;
		double t51 = p0_x-pxf_x;
		double t52 = p0_y-pxf_y;
		double t53 = p0_z-pxf_z;
		double t54 = t51*t51;
		double t55 = t52*t52;
		double t56 = t53*t53;
		double t57 = t54+t55+t56;
		double t58 = 1.0/sqrt(t57);
		double t59 = t5*t51;
		double t60 = t6*t52;
		double t61 = t7*t53;
		double t62 = t59+t60+t61;
		double t63 = t23*t24*t38*t39*(3.0/4.0);
		double t68 = pxf_x*2.0;
		double t64 = -t36+t68;
		double t65 = 1.0/pow(t19,5.0/2.0);
		double t66 = t48*t48;
		double t67 = t24*t33*t35*t43;
		double t69 = 1.0/pow(t57,3.0/2.0);
		double t70 = t12*t43*t44*t48;
		double t71 = pxf_x+pyb_x-t36;
		double t72 = t23*t33*t35*t44*t48*(1.0/2.0);
		double t73 = t36-t68;
		double t74 = t12*t32*t47;
		double t75 = t32*t33*t34;
		double t76 = t13*t51;
		double t77 = t14*t52;
		double t78 = t15*t53;
		double t79 = t76+t77+t78;
		double t80 = 1.0/pow(t57,5.0/2.0);
		double t81 = 1.0/pow(t28,5.0/2.0);
		double t82 = t49*t49;
		double t83 = pxf_x+pyf_x-t36;
		double t84 = p0_y*2.0;
		double t85 = pxb_y*2.0;
		double t86 = t84-t85;
		double t87 = pxb_y+pyb_y-t84;
		double t88 = pxb_y+pyf_y-t84;
		double t89 = pyb_y*2.0;
		double t90 = t84-t89;
		double t91 = pyf_y*2.0;
		double t92 = t84-t91;
		double t93 = t24*t33*t43*t86*(1.0/2.0);
		double t94 = t24*t33*t35*t87*(1.0/2.0);
		double t95 = t12*t43*t44*t90*(1.0/2.0);
		double t96 = t12*t44*t48*t87*(1.0/2.0);
		double t97 = pxf_y+pyb_y-t84;
		double t98 = t23*t24*t35*t39*t86*(3.0/4.0);
		double t99 = pxf_y*2.0;
		double t100 = t84-t99;
		double t101 = t23*t33*t35*t44*t90*(1.0/4.0);
		double t102 = t23*t33*t44*t48*t86*(1.0/4.0);
		double t103 = t12*t23*t48*t65*t90*(3.0/4.0);
		double t104 = pxf_y+pyf_y-t84;
		double t105 = p0_z*2.0;
		double t106 = pxb_z*2.0;
		double t107 = t105-t106;
		double t108 = pxb_z+pyb_z-t105;
		double t109 = pxb_z+pyf_z-t105;
		double t110 = pyb_z*2.0;
		double t111 = t105-t110;
		double t112 = pyf_z*2.0;
		double t113 = t105-t112;
		double t114 = t24*t33*t43*t107*(1.0/2.0);
		double t115 = t24*t33*t35*t108*(1.0/2.0);
		double t116 = t12*t43*t44*t111*(1.0/2.0);
		double t117 = t12*t44*t48*t108*(1.0/2.0);
		double t118 = pxf_z+pyb_z-t105;
		double t119 = t23*t24*t35*t39*t107*(3.0/4.0);
		double t120 = pxf_z*2.0;
		double t121 = t105-t120;
		double t122 = t23*t33*t35*t44*t111*(1.0/4.0);
		double t123 = t23*t33*t44*t48*t107*(1.0/4.0);
		double t124 = t12*t23*t48*t65*t111*(3.0/4.0);
		double t125 = pxf_z+pyf_z-t105;
		double t126 = t12*t24;
		double t127 = t12*t34;
		double t128 = t32*t34*t38*t39*(3.0/4.0);
		double t129 = t24*t33*t35*t43*(1.0/2.0);
		double t130 = t33*t34*t35*t46*(1.0/2.0);
		double t131 = t23*t33*t35*t44*t48*(1.0/4.0);
		double t132 = t32*t33*t35*t47*t49*(1.0/4.0);
		double t133 = t33*t34*t46*t86*(1.0/2.0);
		double t134 = t32*t34*t35*t39*t86*(3.0/4.0);
		double t135 = t32*t33*t47*t49*t86*(1.0/4.0);
		double t136 = t33*t34*t46*t107*(1.0/2.0);
		double t137 = t32*t34*t35*t39*t107*(3.0/4.0);
		double t138 = t32*t33*t47*t49*t107*(1.0/4.0);
		double t139 = t24*t62*t69;
		double t140 = t73*t73;
		double t141 = t34*t79*t80*t140*(3.0/4.0);
		double t142 = t12*t23*t65*t66*(3.0/4.0);
		double t143 = t24*t58;
		double t144 = t44*t58*t62;
		double t145 = t12*t43*t44*t48*(1.0/2.0);
		double t146 = t44*t48*t62*t69*t73*(1.0/4.0);
		double t147 = t34*t58;
		double t148 = t12*t32*t81*t82*(3.0/4.0);
		double t149 = t58*t79*t81*t82*(3.0/4.0);
		double t150 = t12*t46*t47*t49*(1.0/2.0);
		double t151 = t47*t49*t69*t73*t79*(1.0/4.0);
		double t152 = t12*t46*t47*t92*(1.0/2.0);
		double t153 = t32*t33*t35*t47*t92*(1.0/4.0);
		double t154 = t12*t32*t49*t81*t92*(3.0/4.0);
		double t155 = t12*t46*t47*t113*(1.0/2.0);
		double t156 = t32*t33*t35*t47*t113*(1.0/4.0);
		double t157 = t12*t32*t49*t81*t113*(3.0/4.0);
		double t158 = t33*t34*t35*t88*(1.0/2.0);
		double t159 = t12*t47*t49*t88*(1.0/2.0);
		double t160 = t24*t69*t71*t100*(1.0/2.0);
		double t161 = t24*t62*t73*t80*t100*(3.0/4.0);
		double t162 = t44*t48*t62*t69*t100*(1.0/4.0);
		double t163 = t34*t69*t83*t100*(1.0/2.0);
		double t164 = t34*t73*t79*t80*t100*(3.0/4.0);
		double t165 = t47*t49*t69*t79*t100*(1.0/4.0);
		double t166 = t86*t86;
		double t167 = t23*t24*t39*t166*(3.0/4.0);
		double t168 = t90*t90;
		double t169 = t12*t23*t65*t168*(3.0/4.0);
		double t170 = t24*t33*t86*t87;
		double t171 = t12*t44*t87*t90;
		double t172 = t23*t33*t44*t86*t90*(1.0/2.0);
		double t173 = t34*t58*2.0;
		double t174 = t100*t100;
		double t175 = t92*t92;
		double t176 = t24*t33*t87*t107*(1.0/2.0);
		double t177 = t24*t33*t86*t108*(1.0/2.0);
		double t178 = t12*t44*t87*t111*(1.0/2.0);
		double t179 = t12*t44*t90*t108*(1.0/2.0);
		double t180 = t23*t24*t39*t86*t107*(3.0/4.0);
		double t181 = t23*t33*t44*t86*t111*(1.0/4.0);
		double t182 = t23*t33*t44*t90*t107*(1.0/4.0);
		double t183 = t12*t23*t65*t90*t111*(3.0/4.0);
		double t184 = t32*t34*t39*t166*(3.0/4.0);
		double t185 = t24*t33*t86*t87*(1.0/2.0);
		double t186 = t33*t34*t86*t88*(1.0/2.0);
		double t187 = t23*t33*t44*t86*t90*(1.0/4.0);
		double t188 = t32*t33*t47*t86*t92*(1.0/4.0);
		double t189 = t33*t34*t88*t107*(1.0/2.0);
		double t190 = t32*t34*t39*t86*t107*(3.0/4.0);
		double t191 = t32*t33*t47*t92*t107*(1.0/4.0);
		double t192 = t34*t79*t80*t174*(3.0/4.0);
		double t193 = t12*t44*t87*t90*(1.0/2.0);
		double t194 = t44*t62*t69*t90*t100*(1.0/4.0);
		double t195 = t12*t32*t81*t175*(3.0/4.0);
		double t196 = t58*t79*t81*t175*(3.0/4.0);
		double t197 = t12*t47*t88*t92*(1.0/2.0);
		double t198 = t47*t69*t79*t92*t100*(1.0/4.0);
		double t199 = t12*t47*t88*t113*(1.0/2.0);
		double t200 = t32*t33*t47*t86*t113*(1.0/4.0);
		double t201 = t12*t32*t81*t92*t113*(3.0/4.0);
		double t202 = t33*t34*t35*t109*(1.0/2.0);
		double t203 = t12*t47*t49*t109*(1.0/2.0);
		double t204 = t24*t69*t71*t121*(1.0/2.0);
		double t205 = t24*t62*t73*t80*t121*(3.0/4.0);
		double t206 = t44*t48*t62*t69*t121*(1.0/4.0);
		double t207 = t34*t69*t83*t121*(1.0/2.0);
		double t208 = t34*t73*t79*t80*t121*(3.0/4.0);
		double t209 = t47*t49*t69*t79*t121*(1.0/4.0);
		double t210 = t33*t34*t86*t109*(1.0/2.0);
		double t211 = t12*t47*t92*t109*(1.0/2.0);
		double t212 = t24*t69*t97*t121*(1.0/2.0);
		double t213 = t24*t62*t80*t100*t121*(3.0/4.0);
		double t214 = t44*t62*t69*t90*t121*(1.0/4.0);
		double t215 = t34*t69*t104*t121*(1.0/2.0);
		double t216 = t34*t79*t80*t100*t121*(3.0/4.0);
		double t217 = t47*t69*t79*t92*t121*(1.0/4.0);
		double t218 = t107*t107;
		double t219 = t23*t24*t39*t218*(3.0/4.0);
		double t220 = t111*t111;
		double t221 = t12*t23*t65*t220*(3.0/4.0);
		double t222 = t24*t33*t107*t108;
		double t223 = t12*t44*t108*t111;
		double t224 = t23*t33*t44*t107*t111*(1.0/2.0);
		double t225 = t121*t121;
		double t226 = t113*t113;
		double t227 = t32*t34*t39*t218*(3.0/4.0);
		double t228 = t24*t33*t107*t108*(1.0/2.0);
		double t229 = t33*t34*t107*t109*(1.0/2.0);
		double t230 = t23*t33*t44*t107*t111*(1.0/4.0);
		double t231 = t32*t33*t47*t107*t113*(1.0/4.0);
		double t232 = t34*t79*t80*t225*(3.0/4.0);
		double t233 = t12*t44*t108*t111*(1.0/2.0);
		double t234 = t44*t62*t69*t111*t121*(1.0/4.0);
		double t235 = t12*t32*t81*t226*(3.0/4.0);
		double t236 = t58*t79*t81*t226*(3.0/4.0);
		double t237 = t12*t47*t109*t113*(1.0/2.0);
		double t238 = t47*t69*t79*t113*t121*(1.0/4.0);
		double t242 = t23*t24*t33;
		double t243 = t5*t24*t33*t35*(1.0/2.0);
		double t244 = t5*t12*t44*t48*(1.0/2.0);
		double t239 = t63+t126+t129+t131-t242-t243-t244;
		double t240 = t13*t33*t34*t35*(1.0/2.0);
		double t241 = t12*t13*t47*t49*(1.0/2.0);
		double t248 = t5*t24*t33*t86*(1.0/2.0);
		double t249 = t5*t12*t44*t90*(1.0/2.0);
		double t245 = t94+t98+t101-t248-t249;
		double t246 = t13*t33*t34*t86*(1.0/2.0);
		double t247 = t12*t13*t47*t92*(1.0/2.0);
		double t253 = t5*t24*t33*t107*(1.0/2.0);
		double t254 = t5*t12*t44*t111*(1.0/2.0);
		double t250 = t115+t119+t122-t253-t254;
		double t251 = t13*t33*t34*t107*(1.0/2.0);
		double t252 = t12*t13*t47*t113*(1.0/2.0);
		double t255 = t13*t33*t34*t35;
		double t256 = t14*t33*t34*t35*(1.0/2.0);
		double t257 = t15*t33*t34*t35*(1.0/2.0);
		double t412 = t2*t24*t33*t35*(1.0/2.0);
		double t258 = t126+t131-t244-t412;
		double t259 = t3*t24*t33*t35*(1.0/2.0);
		double t260 = -t101+t249+t259;
		double t261 = t4*t24*t33*t35*(1.0/2.0);
		double t262 = -t122+t254+t261;
		double t263 = t2*t33*t34*t35*(1.0/2.0);
		double t264 = t127+t132-t241-t263;
		double t265 = t3*t33*t34*t35*(1.0/2.0);
		double t266 = -t153+t247+t265;
		double t267 = t4*t33*t34*t35*(1.0/2.0);
		double t268 = -t156+t252+t267;
		double t269 = t6*t24*t33*t35*(1.0/2.0);
		double t270 = t12*t14*t47*t49*(1.0/2.0);
		double t271 = t14*t33*t34*t86*(1.0/2.0);
		double t272 = t12*t14*t47*t92*(1.0/2.0);
		double t276 = t6*t24*t33*t107*(1.0/2.0);
		double t277 = t6*t12*t44*t111*(1.0/2.0);
		double t273 = t177+t180+t181-t276-t277;
		double t274 = t14*t33*t34*t107*(1.0/2.0);
		double t275 = t12*t14*t47*t113*(1.0/2.0);
		double t278 = -t98+t248+t269;
		double t279 = -t134+t246+t256;
		double t280 = lambda1*t279;
		double t281 = t14*t33*t34*t86;
		double t282 = t15*t33*t34*t86*(1.0/2.0);
		double t283 = t2*t24*t33*t86*(1.0/2.0);
		double t284 = t6*t12*t44*t48*(1.0/2.0);
		double t285 = -t102+t283+t284;
		double t433 = t3*t24*t33*t86*(1.0/2.0);
		double t438 = t6*t12*t44*t90*(1.0/2.0);
		double t286 = t126+t187-t433-t438;
		double t287 = t4*t24*t33*t86*(1.0/2.0);
		double t288 = -t181+t277+t287;
		double t289 = t2*t33*t34*t86*(1.0/2.0);
		double t290 = -t135+t270+t289;
		double t291 = t3*t33*t34*t86*(1.0/2.0);
		double t292 = t127+t188-t272-t291;
		double t293 = t4*t33*t34*t86*(1.0/2.0);
		double t294 = -t200+t275+t293;
		double t295 = t7*t24*t33*t35*(1.0/2.0);
		double t296 = t12*t15*t47*t49*(1.0/2.0);
		double t297 = t7*t24*t33*t86*(1.0/2.0);
		double t298 = t12*t15*t47*t92*(1.0/2.0);
		double t299 = t15*t33*t34*t107*(1.0/2.0);
		double t300 = t12*t15*t47*t113*(1.0/2.0);
		double t301 = -t119+t253+t295;
		double t302 = -t137+t251+t257;
		double t303 = lambda1*t302;
		double t304 = -t180+t276+t297;
		double t305 = -t190+t274+t282;
		double t306 = lambda1*t305;
		double t307 = t15*t33*t34*t107;
		double t308 = t2*t24*t33*t107*(1.0/2.0);
		double t309 = t7*t12*t44*t48*(1.0/2.0);
		double t310 = -t123+t308+t309;
		double t311 = t3*t24*t33*t107*(1.0/2.0);
		double t312 = t7*t12*t44*t90*(1.0/2.0);
		double t313 = -t182+t311+t312;
		double t455 = t4*t24*t33*t107*(1.0/2.0);
		double t461 = t7*t12*t44*t111*(1.0/2.0);
		double t314 = t126+t230-t455-t461;
		double t315 = t2*t33*t34*t107*(1.0/2.0);
		double t316 = -t138+t296+t315;
		double t317 = t3*t33*t34*t107*(1.0/2.0);
		double t318 = -t191+t298+t317;
		double t319 = t4*t33*t34*t107*(1.0/2.0);
		double t320 = t127+t231-t300-t319;
		double t321 = t24*t62*t80*t140*(3.0/4.0);
		double t322 = t24*t69*t71*t73*(1.0/2.0);
		double t350 = t5*t44*t48*t58*(1.0/2.0);
		double t323 = -t139+t143+t146+t321+t322-t350-t5*t24*t69*t73*(1.0/2.0);
		double t324 = lambda3*t323;
		double t325 = t34*t69*t73*t83*(1.0/2.0);
		double t344 = t34*t69*t79;
		double t355 = t13*t47*t49*t58*(1.0/2.0);
		double t326 = t141+t147+t151+t325-t344-t355-t13*t34*t69*t73*(1.0/2.0);
		double t327 = t324-lambda1*t326;
		double t328 = t24*t69*t73*t97*(1.0/2.0);
		double t329 = t44*t62*t69*t73*t90*(1.0/4.0);
		double t345 = t5*t24*t69*t100*(1.0/2.0);
		double t352 = t5*t44*t58*t90*(1.0/2.0);
		double t330 = t161+t328+t329-t345-t352;
		double t331 = lambda3*t330;
		double t332 = t34*t69*t73*t104*(1.0/2.0);
		double t333 = t47*t69*t73*t79*t92*(1.0/4.0);
		double t346 = t13*t34*t69*t100*(1.0/2.0);
		double t357 = t13*t47*t58*t92*(1.0/2.0);
		double t334 = t164+t332+t333-t346-t357;
		double t335 = t331-lambda1*t334;
		double t336 = t24*t69*t73*t118*(1.0/2.0);
		double t337 = t44*t62*t69*t73*t111*(1.0/4.0);
		double t347 = t5*t24*t69*t121*(1.0/2.0);
		double t354 = t5*t44*t58*t111*(1.0/2.0);
		double t338 = t205+t336+t337-t347-t354;
		double t339 = lambda3*t338;
		double t340 = t34*t69*t73*t125*(1.0/2.0);
		double t341 = t47*t69*t73*t79*t113*(1.0/4.0);
		double t348 = t13*t34*t69*t121*(1.0/2.0);
		double t359 = t13*t47*t58*t113*(1.0/2.0);
		double t342 = t208+t340+t341-t348-t359;
		double t343 = t339-lambda1*t342;
		double t349 = t24*t51*t69*t73*(1.0/2.0);
		double t351 = t24*t52*t69*t73*(1.0/2.0);
		double t353 = t24*t53*t69*t73*(1.0/2.0);
		double t356 = t34*t52*t69*t73*(1.0/2.0);
		double t358 = t34*t53*t69*t73*(1.0/2.0);
		double t360 = t6*t24*t69*t73*(1.0/2.0);
		double t361 = t14*t34*t69*t73*(1.0/2.0);
		double t362 = t24*t62*t80*t174*(3.0/4.0);
		double t363 = t24*t69*t97*t100*(1.0/2.0);
		double t383 = t6*t44*t58*t90*(1.0/2.0);
		double t364 = -t139+t143+t194+t362+t363-t383-t6*t24*t69*t100*(1.0/2.0);
		double t365 = lambda3*t364;
		double t366 = t34*t69*t100*t104*(1.0/2.0);
		double t367 = t24*t69*t100*t118*(1.0/2.0);
		double t368 = t44*t62*t69*t100*t111*(1.0/4.0);
		double t379 = t6*t24*t69*t121*(1.0/2.0);
		double t385 = t6*t44*t58*t111*(1.0/2.0);
		double t369 = t213+t367+t368-t379-t385;
		double t370 = lambda3*t369;
		double t371 = t34*t69*t100*t125*(1.0/2.0);
		double t372 = t47*t69*t79*t100*t113*(1.0/4.0);
		double t380 = t14*t34*t69*t121*(1.0/2.0);
		double t388 = t14*t47*t58*t113*(1.0/2.0);
		double t373 = t216+t371+t372-t380-t388;
		double t374 = t370-lambda1*t373;
		double t375 = -t161+t345+t360;
		double t376 = lambda3*t375;
		double t377 = -t164+t346+t361;
		double t378 = t376-lambda1*t377;
		double t381 = t24*t51*t69*t100*(1.0/2.0);
		double t382 = t24*t52*t69*t100*(1.0/2.0);
		double t384 = t24*t53*t69*t100*(1.0/2.0);
		double t386 = t34*t51*t69*t100*(1.0/2.0);
		double t387 = t34*t53*t69*t100*(1.0/2.0);
		double t389 = t7*t24*t69*t73*(1.0/2.0);
		double t390 = t15*t34*t69*t73*(1.0/2.0);
		double t391 = t7*t24*t69*t100*(1.0/2.0);
		double t392 = t15*t34*t69*t100*(1.0/2.0);
		double t393 = t24*t62*t80*t225*(3.0/4.0);
		double t394 = t24*t69*t118*t121*(1.0/2.0);
		double t409 = t7*t44*t58*t111*(1.0/2.0);
		double t395 = -t139+t143+t234+t393+t394-t409-t7*t24*t69*t121*(1.0/2.0);
		double t396 = lambda3*t395;
		double t397 = t34*t69*t121*t125*(1.0/2.0);
		double t398 = -t205+t347+t389;
		double t399 = lambda3*t398;
		double t400 = -t208+t348+t390;
		double t401 = t399-lambda1*t400;
		double t402 = -t213+t379+t391;
		double t403 = lambda3*t402;
		double t404 = -t216+t380+t392;
		double t405 = t403-lambda1*t404;
		double t406 = t24*t51*t69*t121*(1.0/2.0);
		double t407 = t24*t52*t69*t121*(1.0/2.0);
		double t408 = t24*t53*t69*t121*(1.0/2.0);
		double t410 = t34*t51*t69*t121*(1.0/2.0);
		double t411 = t34*t52*t69*t121*(1.0/2.0);
		double t413 = t44*t48*t51*t58*(1.0/2.0);
		double t414 = t44*t51*t58*t90*(1.0/2.0);
		double t415 = t44*t51*t58*t111*(1.0/2.0);
		double t416 = lambda3*t258;
		double t417 = t416-lambda2*t258;
		double t418 = lambda2*t285;
		double t419 = t418-lambda3*t285;
		double t420 = lambda2*t310;
		double t421 = t420-lambda3*t310;
		double t422 = t143+t146-t349-t350;
		double t423 = t6*t44*t48*t58*(1.0/2.0);
		double t424 = -t162+t381+t423;
		double t425 = lambda3*t424;
		double t426 = t7*t44*t48*t58*(1.0/2.0);
		double t427 = -t206+t406+t426;
		double t428 = lambda3*t427;
		double t429 = t44*t48*t52*t58*(1.0/2.0);
		double t430 = t44*t48*t53*t58*(1.0/2.0);
		double t431 = t3*t12*t44*t48*(1.0/2.0);
		double t432 = t12*t23*t44;
		double t434 = t44*t52*t58*t90*(1.0/2.0);
		double t435 = t44*t52*t58*t111*(1.0/2.0);
		double t436 = lambda2*t260;
		double t437 = t436-lambda3*t260;
		double t439 = lambda3*t286;
		double t440 = t439-lambda2*t286;
		double t441 = lambda2*t313;
		double t442 = t441-lambda3*t313;
		double t443 = -t329+t351+t352;
		double t444 = lambda3*t443;
		double t445 = t143+t194-t382-t383;
		double t446 = t7*t44*t58*t90*(1.0/2.0);
		double t447 = -t214+t407+t446;
		double t448 = lambda3*t447;
		double t449 = t2*t12*t44*t90*(1.0/2.0);
		double t450 = -t103+t431+t449;
		double t451 = lambda2*t450;
		double t452 = t44*t53*t58*t90*(1.0/2.0);
		double t453 = t4*t12*t44*t48*(1.0/2.0);
		double t454 = t4*t12*t44*t90*(1.0/2.0);
		double t456 = t44*t53*t58*t111*(1.0/2.0);
		double t457 = lambda2*t262;
		double t458 = t457-lambda3*t262;
		double t459 = lambda2*t288;
		double t460 = t459-lambda3*t288;
		double t462 = lambda3*t314;
		double t463 = t462-lambda2*t314;
		double t464 = -t337+t353+t354;
		double t465 = lambda3*t464;
		double t466 = -t368+t384+t385;
		double t467 = lambda3*t466;
		double t468 = t143+t234-t408-t409;
		double t469 = t2*t12*t44*t111*(1.0/2.0);
		double t470 = -t124+t453+t469;
		double t471 = lambda2*t470;
		double t472 = t3*t12*t44*t111*(1.0/2.0);
		double t473 = -t183+t454+t472;
		double t474 = lambda2*t473;
		double t475 = t2*t12*t47*t49*(1.0/2.0);
		double t476 = t47*t49*t58*t83*(1.0/2.0);
		double t486 = t34*t51*t69*t73*(1.0/2.0);
		double t491 = t47*t58*t79;
		double t477 = t74-t127-t132+t147-t148+t149-t150+t151+t263+t475+t476-t486-t491-t47*t49*t51*t58*(1.0/2.0);
		double t478 = t47*t51*t58*t92*(1.0/2.0);
		double t479 = t47*t51*t58*t113*(1.0/2.0);
		double t480 = lambda2*t264;
		double t481 = t480-lambda1*t264;
		double t482 = lambda1*t290;
		double t483 = t482-lambda2*t290;
		double t484 = lambda1*t316;
		double t485 = t484-lambda2*t316;
		double t487 = t14*t47*t49*t58*(1.0/2.0);
		double t488 = -t165+t386+t487;
		double t489 = t15*t47*t49*t58*(1.0/2.0);
		double t490 = -t209+t410+t489;
		double t492 = t2*t12*t47*t49;
		double t493 = t47*t49*t52*t58*(1.0/2.0);
		double t494 = t47*t49*t53*t58*(1.0/2.0);
		double t495 = t3*t12*t47*t49*(1.0/2.0);
		double t496 = t3*t12*t47*t92*(1.0/2.0);
		double t497 = t47*t58*t92*t104*(1.0/2.0);
		double t498 = t47*t52*t58*t113*(1.0/2.0);
		double t499 = lambda1*t266;
		double t500 = t499-lambda2*t266;
		double t501 = lambda2*t292;
		double t502 = t501-lambda1*t292;
		double t503 = lambda1*t318;
		double t504 = t503-lambda2*t318;
		double t505 = -t333+t356+t357;
		double t506 = t147+t198-t14*t47*t58*t92*(1.0/2.0)-t34*t52*t69*t100*(1.0/2.0);
		double t507 = lambda1*t506;
		double t508 = t15*t47*t58*t92*(1.0/2.0);
		double t509 = -t217+t411+t508;
		double t510 = t2*t12*t47*t92*(1.0/2.0);
		double t511 = -t154+t495+t510;
		double t512 = t3*t12*t47*t92;
		double t513 = t47*t53*t58*t92*(1.0/2.0);
		double t514 = t4*t12*t47*t49*(1.0/2.0);
		double t515 = t4*t12*t47*t92*(1.0/2.0);
		double t516 = t4*t12*t47*t113*(1.0/2.0);
		double t517 = t47*t58*t113*t125*(1.0/2.0);
		double t518 = lambda1*t268;
		double t519 = t518-lambda2*t268;
		double t520 = lambda1*t294;
		double t521 = t520-lambda2*t294;
		double t522 = lambda2*t320;
		double t523 = t522-lambda1*t320;
		double t524 = -t341+t358+t359;
		double t525 = -t372+t387+t388;
		double t526 = t147+t238-t15*t47*t58*t113*(1.0/2.0)-t34*t53*t69*t121*(1.0/2.0);
		double t527 = lambda1*t526;
		double t528 = t2*t12*t47*t113*(1.0/2.0);
		double t529 = -t157+t514+t528;
		double t530 = t3*t12*t47*t113*(1.0/2.0);
		double t531 = -t201+t515+t530;
		double t532 = t4*t12*t47*t113;

		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i, lambda3*(t50+t63+t67+t70+t72+t139+t142+t144-t24*t58*2.0-t12*t23*t44-t23*t24*t33-t44*t48*t58*t71-t24*t69*t71*t73-t58*t62*t65*t66*(3.0/4.0)-t24*t62*(t64*t64)*t80*(3.0/4.0)-t44*t48*t62*t69*t73*(1.0/2.0))-lambda2*(t50+t63+t67+t70+t72+t74+t75-t12*t34*2.0-t12*t23*t44-t23*t24*t33-t32*t34*t38*t39*(3.0/4.0)-t33*t34*t35*t46-t12*t46*t47*t49+t12*t23*(t40*t40)*t65*(3.0/4.0)-t12*t32*(t41*t41)*t81*(3.0/4.0)-t32*t33*t35*t47*t49*(1.0/2.0))+lambda1*(t74+t75+t141+t149+t173-t12*t34*2.0-t34*t69*t79-t47*t58*t79-t32*t34*t38*t39*(3.0/4.0)-t33*t34*t35*t46-t12*t46*t47*t49-t12*t32*t81*t82*(3.0/4.0)+t47*t49*t58*t83+t34*t69*t73*t83-t32*t33*t35*t47*t49*(1.0/2.0)+t47*t49*t69*t73*t79*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i+vnum, -lambda2*(t93+t94+t95+t96+t98+t101+t102+t103-t33*t34*t35*t88*(1.0/2.0)-t12*t47*t49*t88*(1.0/2.0)-t12*t46*t47*t92*(1.0/2.0)-t33*t34*t46*t86*(1.0/2.0)-t32*t34*t35*t39*t86*(3.0/4.0)-t32*t33*t35*t47*t92*(1.0/4.0)-t32*t33*t47*t49*t86*(1.0/4.0)-t12*t32*t49*t81*t92*(3.0/4.0))+lambda3*(t93+t94+t95+t96+t98+t101+t102+t103-t44*t48*t58*t97*(1.0/2.0)-t24*t69*t73*t97*(1.0/2.0)-t44*t58*t71*t90*(1.0/2.0)-t24*t69*t71*t100*(1.0/2.0)-t44*t48*t62*t69*t100*(1.0/4.0)-t48*t58*t62*t65*t90*(3.0/4.0)-t44*t62*t69*t73*t90*(1.0/4.0)-t24*t62*t73*t80*t100*(3.0/4.0))-lambda1*(t133+t134+t135+t152+t153+t154+t158+t159-t47*t49*t58*t104*(1.0/2.0)-t34*t69*t73*t104*(1.0/2.0)-t47*t58*t83*t92*(1.0/2.0)-t34*t69*t83*t100*(1.0/2.0)-t47*t49*t69*t79*t100*(1.0/4.0)-t49*t58*t79*t81*t92*(3.0/4.0)-t47*t69*t73*t79*t92*(1.0/4.0)-t34*t73*t79*t80*t100*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i+2*vnum, -lambda2*(t114+t115+t116+t117+t119+t122+t123+t124-t33*t34*t35*t109*(1.0/2.0)-t12*t47*t49*t109*(1.0/2.0)-t12*t46*t47*t113*(1.0/2.0)-t33*t34*t46*t107*(1.0/2.0)-t32*t34*t35*t39*t107*(3.0/4.0)-t32*t33*t35*t47*t113*(1.0/4.0)-t32*t33*t47*t49*t107*(1.0/4.0)-t12*t32*t49*t81*t113*(3.0/4.0))+lambda3*(t114+t115+t116+t117+t119+t122+t123+t124-t44*t48*t58*t118*(1.0/2.0)-t24*t69*t73*t118*(1.0/2.0)-t44*t58*t71*t111*(1.0/2.0)-t24*t69*t71*t121*(1.0/2.0)-t44*t48*t62*t69*t121*(1.0/4.0)-t48*t58*t62*t65*t111*(3.0/4.0)-t44*t62*t69*t73*t111*(1.0/4.0)-t24*t62*t73*t80*t121*(3.0/4.0))-lambda1*(t136+t137+t138+t155+t156+t157+t202+t203-t47*t49*t58*t125*(1.0/2.0)-t34*t69*t73*t125*(1.0/2.0)-t47*t58*t83*t113*(1.0/2.0)-t34*t69*t83*t121*(1.0/2.0)-t47*t49*t69*t79*t121*(1.0/4.0)-t49*t58*t79*t81*t113*(3.0/4.0)-t47*t69*t73*t79*t113*(1.0/4.0)-t34*t73*t79*t80*t121*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i, lambda1*(-t75+t127+t128+t130+t132-t13*t33*t34*t35*(1.0/2.0)-t12*t13*t47*t49*(1.0/2.0))-lambda3*t239+lambda2*(t63+t75+t126-t127-t128+t129-t130+t131-t132+t240+t241-t23*t24*t33-t5*t24*t33*t35*(1.0/2.0)-t5*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i+vnum, lambda2*(t93+t98+t102-t133-t134-t135+t256+t270-t6*t24*t33*t35*(1.0/2.0)-t6*t12*t44*t48*(1.0/2.0))-lambda3*(t93+t98+t102-t6*t24*t33*t35*(1.0/2.0)-t6*t12*t44*t48*(1.0/2.0))+lambda1*(t133+t134+t135-t14*t33*t34*t35*(1.0/2.0)-t12*t14*t47*t49*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i+2*vnum, lambda2*(t114+t119+t123-t136-t137-t138+t257+t296-t7*t24*t33*t35*(1.0/2.0)-t7*t12*t44*t48*(1.0/2.0))-lambda3*(t114+t119+t123-t7*t24*t33*t35*(1.0/2.0)-t7*t12*t44*t48*(1.0/2.0))+lambda1*(t136+t137+t138-t15*t33*t34*t35*(1.0/2.0)-t12*t15*t47*t49*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i, t327);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i+vnum, lambda3*(t160+t161+t162-t6*t44*t48*t58*(1.0/2.0)-t6*t24*t69*t73*(1.0/2.0))-lambda1*(t163+t164+t165-t14*t47*t49*t58*(1.0/2.0)-t14*t34*t69*t73*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i+2*vnum, lambda3*(t204+t205+t206-t7*t44*t48*t58*(1.0/2.0)-t7*t24*t69*t73*(1.0/2.0))-lambda1*(t207+t208+t209-t15*t47*t49*t58*(1.0/2.0)-t15*t34*t69*t73*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yb_i, lambda2*(t126+t131+t142+t145-t12*t23*t44-t2*t24*t33*t35*(1.0/2.0)-t2*t12*t44*t48*(1.0/2.0))-lambda3*(t126+t131+t142-t143+t144+t145-t146+t349+t413-t12*t23*t44-t2*t24*t33*t35*(1.0/2.0)-t2*t12*t44*t48*(1.0/2.0)-t44*t48*t58*t71*(1.0/2.0)-t58*t62*t65*t66*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yb_i+vnum, -lambda3*(t95+t101+t103+t351+t429-t3*t24*t33*t35*(1.0/2.0)-t3*t12*t44*t48*(1.0/2.0)-t44*t58*t71*t90*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0)-t44*t62*t69*t73*t90*(1.0/4.0))+lambda2*(t95+t101+t103-t3*t24*t33*t35*(1.0/2.0)-t3*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yb_i+2*vnum, -lambda3*(t116+t122+t124+t353+t430-t4*t24*t33*t35*(1.0/2.0)-t4*t12*t44*t48*(1.0/2.0)-t44*t58*t71*t111*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0)-t44*t62*t69*t73*t111*(1.0/4.0))+lambda2*(t116+t122+t124-t4*t24*t33*t35*(1.0/2.0)-t4*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i, -lambda2*(-t74+t127+t132+t148+t150-t2*t33*t34*t35*(1.0/2.0)-t2*t12*t47*t49*(1.0/2.0))-lambda1*t477);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i+vnum, lambda1*(t152+t153+t154+t356+t493-t3*t33*t34*t35*(1.0/2.0)-t3*t12*t47*t49*(1.0/2.0)-t47*t58*t83*t92*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0)-t47*t69*t73*t79*t92*(1.0/4.0))-lambda2*(t152+t153+t154-t3*t33*t34*t35*(1.0/2.0)-t3*t12*t47*t49*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i+2*vnum, lambda1*(t155+t156+t157+t358+t494-t4*t33*t34*t35*(1.0/2.0)-t4*t12*t47*t49*(1.0/2.0)-t47*t58*t83*t113*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0)-t47*t69*t73*t79*t113*(1.0/4.0))-lambda2*(t155+t156+t157-t4*t33*t34*t35*(1.0/2.0)-t4*t12*t47*t49*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i, lambda3*(t93+t94+t95+t96+t98+t101+t102+t103-t160-t161-t162-t44*t48*t58*t97*(1.0/2.0)-t24*t69*t73*t97*(1.0/2.0)-t44*t58*t71*t90*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0)-t44*t62*t69*t73*t90*(1.0/4.0))-lambda1*(t133+t134+t135+t152+t153+t154+t158+t159-t163-t164-t165-t47*t49*t58*t104*(1.0/2.0)-t34*t69*t73*t104*(1.0/2.0)-t47*t58*t83*t92*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0)-t47*t69*t73*t79*t92*(1.0/4.0))-lambda2*(t93+t94+t95+t96+t98+t101+t102+t103-t133-t134-t135-t152-t153-t154-t158-t159));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i+vnum, lambda1*(t74+t75+t173+t192+t196-t12*t34*2.0-t34*t69*t79-t47*t58*t79-t12*t47*t88*t92-t33*t34*t86*t88-t32*t34*t39*t166*(3.0/4.0)-t12*t32*t81*t175*(3.0/4.0)+t47*t58*t92*t104+t34*t69*t100*t104-t32*t33*t47*t86*t92*(1.0/2.0)+t47*t69*t79*t92*t100*(1.0/2.0))-lambda2*(t50+t74+t75+t167+t169+t170+t171+t172-t12*t34*2.0-t12*t23*t44-t23*t24*t33-t12*t47*t88*t92-t33*t34*t86*t88-t32*t34*t39*t166*(3.0/4.0)-t12*t32*t81*t175*(3.0/4.0)-t32*t33*t47*t86*t92*(1.0/2.0))+lambda3*(t50+t139+t144+t167+t169+t170+t171+t172-t24*t58*2.0-t12*t23*t44-t23*t24*t33-t44*t58*t90*t97-t24*t69*t97*t100-t24*t62*t80*t174*(3.0/4.0)-t58*t62*t65*t168*(3.0/4.0)-t44*t62*t69*t90*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i+2*vnum, -lambda2*(t176+t177+t178+t179+t180+t181+t182+t183-t12*t47*t88*t113*(1.0/2.0)-t12*t47*t92*t109*(1.0/2.0)-t33*t34*t86*t109*(1.0/2.0)-t33*t34*t88*t107*(1.0/2.0)-t32*t34*t39*t86*t107*(3.0/4.0)-t32*t33*t47*t86*t113*(1.0/4.0)-t32*t33*t47*t92*t107*(1.0/4.0)-t12*t32*t81*t92*t113*(3.0/4.0))+lambda3*(t176+t177+t178+t179+t180+t181+t182+t183-t44*t58*t90*t118*(1.0/2.0)-t44*t58*t97*t111*(1.0/2.0)-t24*t69*t97*t121*(1.0/2.0)-t24*t69*t100*t118*(1.0/2.0)-t44*t62*t69*t90*t121*(1.0/4.0)-t44*t62*t69*t100*t111*(1.0/4.0)-t58*t62*t65*t90*t111*(3.0/4.0)-t24*t62*t80*t100*t121*(3.0/4.0))-lambda1*(t189+t190+t191+t199+t200+t201+t210+t211-t47*t58*t92*t125*(1.0/2.0)-t47*t58*t104*t113*(1.0/2.0)-t34*t69*t100*t125*(1.0/2.0)-t34*t69*t104*t121*(1.0/2.0)-t47*t69*t79*t92*t121*(1.0/4.0)-t47*t69*t79*t100*t113*(1.0/4.0)-t34*t79*t80*t100*t121*(3.0/4.0)-t58*t79*t81*t92*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i, -lambda3*t245+lambda2*(t94+t98+t101-t134-t153-t158+t246+t247-t5*t24*t33*t86*(1.0/2.0)-t5*t12*t44*t90*(1.0/2.0))+lambda1*(t134+t153+t158-t12*t13*t47*t92*(1.0/2.0)-t13*t33*t34*t86*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+vnum, -lambda3*(t126+t167+t185+t187-t23*t24*t33-t6*t24*t33*t86*(1.0/2.0)-t6*t12*t44*t90*(1.0/2.0))+lambda1*(-t75+t127+t184+t186+t188-t12*t14*t47*t92*(1.0/2.0)-t14*t33*t34*t86*(1.0/2.0))+lambda2*(t75+t126-t127+t167-t184+t185-t186+t187-t188+t271+t272-t23*t24*t33-t6*t24*t33*t86*(1.0/2.0)-t6*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+2*vnum, lambda2*(t176+t180+t182-t189-t190-t191+t282+t298-t7*t24*t33*t86*(1.0/2.0)-t7*t12*t44*t90*(1.0/2.0))-lambda3*(t176+t180+t182-t7*t24*t33*t86*(1.0/2.0)-t7*t12*t44*t90*(1.0/2.0))+lambda1*(t189+t190+t191-t12*t15*t47*t92*(1.0/2.0)-t15*t33*t34*t86*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i, t335);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+vnum, t365-lambda1*(t147+t192+t198+t366-t34*t69*t79-t14*t47*t58*t92*(1.0/2.0)-t14*t34*t69*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+2*vnum, lambda3*(t212+t213+t214-t7*t44*t58*t90*(1.0/2.0)-t7*t24*t69*t100*(1.0/2.0))-lambda1*(t215+t216+t217-t15*t47*t58*t92*(1.0/2.0)-t15*t34*t69*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yb_i, -lambda3*(t96+t102+t103-t162+t381+t414-t2*t24*t33*t86*(1.0/2.0)-t2*t12*t44*t90*(1.0/2.0)-t44*t48*t58*t97*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0))+lambda2*(t96+t102+t103-t2*t24*t33*t86*(1.0/2.0)-t2*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yb_i+vnum, lambda2*(t126+t169+t187+t193-t12*t23*t44-t3*t24*t33*t86*(1.0/2.0)-t3*t12*t44*t90*(1.0/2.0))-lambda3*(t126-t143+t144+t169+t187+t193-t194+t382+t434-t12*t23*t44-t3*t24*t33*t86*(1.0/2.0)-t3*t12*t44*t90*(1.0/2.0)-t44*t58*t90*t97*(1.0/2.0)-t58*t62*t65*t168*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yb_i+2*vnum, -lambda3*(t178+t181+t183+t384+t452-t4*t24*t33*t86*(1.0/2.0)-t4*t12*t44*t90*(1.0/2.0)-t44*t58*t97*t111*(1.0/2.0)-t44*t62*t69*t100*t111*(1.0/4.0)-t58*t62*t65*t90*t111*(3.0/4.0))+lambda2*(t178+t181+t183-t4*t24*t33*t86*(1.0/2.0)-t4*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i, lambda1*(t135+t154+t159-t165+t386+t478-t2*t12*t47*t92*(1.0/2.0)-t2*t33*t34*t86*(1.0/2.0)-t47*t49*t58*t104*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0))-lambda2*(t135+t154+t159-t2*t12*t47*t92*(1.0/2.0)-t2*t33*t34*t86*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i+vnum, -lambda2*(-t74+t127+t188+t195+t197-t3*t12*t47*t92*(1.0/2.0)-t3*t33*t34*t86*(1.0/2.0))-lambda1*(t74-t127+t147-t188-t195+t196-t197+t198+t291+t496+t497-t47*t58*t79-t47*t52*t58*t92*(1.0/2.0)-t34*t52*t69*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i+2*vnum, lambda1*(t199+t200+t201+t387+t513-t4*t12*t47*t92*(1.0/2.0)-t4*t33*t34*t86*(1.0/2.0)-t47*t58*t104*t113*(1.0/2.0)-t47*t69*t79*t100*t113*(1.0/4.0)-t58*t79*t81*t92*t113*(3.0/4.0))-lambda2*(t199+t200+t201-t4*t12*t47*t92*(1.0/2.0)-t4*t33*t34*t86*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i, lambda3*(t114+t115+t116+t117+t119+t122+t123+t124-t204-t205-t206-t44*t48*t58*t118*(1.0/2.0)-t24*t69*t73*t118*(1.0/2.0)-t44*t58*t71*t111*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0)-t44*t62*t69*t73*t111*(1.0/4.0))-lambda1*(t136+t137+t138+t155+t156+t157+t202+t203-t207-t208-t209-t47*t49*t58*t125*(1.0/2.0)-t34*t69*t73*t125*(1.0/2.0)-t47*t58*t83*t113*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0)-t47*t69*t73*t79*t113*(1.0/4.0))-lambda2*(t114+t115+t116+t117+t119+t122+t123+t124-t136-t137-t138-t155-t156-t157-t202-t203));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+vnum, lambda3*(t176+t177+t178+t179+t180+t181+t182+t183-t212-t213-t214-t44*t58*t90*t118*(1.0/2.0)-t44*t58*t97*t111*(1.0/2.0)-t24*t69*t100*t118*(1.0/2.0)-t44*t62*t69*t100*t111*(1.0/4.0)-t58*t62*t65*t90*t111*(3.0/4.0))-lambda1*(t189+t190+t191+t199+t200+t201+t210+t211-t215-t216-t217-t47*t58*t92*t125*(1.0/2.0)-t47*t58*t104*t113*(1.0/2.0)-t34*t69*t100*t125*(1.0/2.0)-t47*t69*t79*t100*t113*(1.0/4.0)-t58*t79*t81*t92*t113*(3.0/4.0))-lambda2*(t176+t177+t178+t179+t180+t181+t182+t183-t189-t190-t191-t199-t200-t201-t210-t211));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+2*vnum, lambda1*(t74+t75+t173+t232+t236-t12*t34*2.0-t34*t69*t79-t47*t58*t79-t12*t47*t109*t113-t33*t34*t107*t109-t32*t34*t39*t218*(3.0/4.0)+t47*t58*t113*t125+t34*t69*t121*t125-t12*t32*t81*t226*(3.0/4.0)-t32*t33*t47*t107*t113*(1.0/2.0)+t47*t69*t79*t113*t121*(1.0/2.0))-lambda2*(t50+t74+t75+t219+t221+t222+t223+t224-t12*t34*2.0-t12*t23*t44-t23*t24*t33-t12*t47*t109*t113-t33*t34*t107*t109-t32*t34*t39*t218*(3.0/4.0)-t12*t32*t81*t226*(3.0/4.0)-t32*t33*t47*t107*t113*(1.0/2.0))+lambda3*(t50+t139+t144+t219+t221+t222+t223+t224-t24*t58*2.0-t12*t23*t44-t23*t24*t33-t44*t58*t111*t118-t24*t69*t118*t121-t24*t62*t80*t225*(3.0/4.0)-t58*t62*t65*t220*(3.0/4.0)-t44*t62*t69*t111*t121*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i, -lambda3*t250+lambda2*(t115+t119+t122-t137-t156-t202+t251+t252-t5*t24*t33*t107*(1.0/2.0)-t5*t12*t44*t111*(1.0/2.0))+lambda1*(t137+t156+t202-t12*t13*t47*t113*(1.0/2.0)-t13*t33*t34*t107*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+vnum, -lambda3*t273+lambda2*(t177+t180+t181-t190-t200-t210+t274+t275-t6*t24*t33*t107*(1.0/2.0)-t6*t12*t44*t111*(1.0/2.0))+lambda1*(t190+t200+t210-t12*t14*t47*t113*(1.0/2.0)-t14*t33*t34*t107*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+2*vnum, -lambda3*(t126+t219+t228+t230-t23*t24*t33-t7*t24*t33*t107*(1.0/2.0)-t7*t12*t44*t111*(1.0/2.0))+lambda1*(-t75+t127+t227+t229+t231-t12*t15*t47*t113*(1.0/2.0)-t15*t33*t34*t107*(1.0/2.0))+lambda2*(t75+t126-t127+t219-t227+t228-t229+t230-t231+t299+t300-t23*t24*t33-t7*t24*t33*t107*(1.0/2.0)-t7*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i, t343);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+vnum, t374);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+2*vnum, t396-lambda1*(t147+t232+t238+t397-t34*t69*t79-t15*t47*t58*t113*(1.0/2.0)-t15*t34*t69*t121*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yb_i, -lambda3*(t117+t123+t124-t206+t406+t415-t2*t24*t33*t107*(1.0/2.0)-t2*t12*t44*t111*(1.0/2.0)-t44*t48*t58*t118*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0))+lambda2*(t117+t123+t124-t2*t24*t33*t107*(1.0/2.0)-t2*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yb_i+vnum, -lambda3*(t179+t182+t183-t214+t407+t435-t3*t24*t33*t107*(1.0/2.0)-t3*t12*t44*t111*(1.0/2.0)-t44*t58*t90*t118*(1.0/2.0)-t58*t62*t65*t90*t111*(3.0/4.0))+lambda2*(t179+t182+t183-t3*t24*t33*t107*(1.0/2.0)-t3*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yb_i+2*vnum, lambda2*(t126+t221+t230+t233-t12*t23*t44-t4*t24*t33*t107*(1.0/2.0)-t4*t12*t44*t111*(1.0/2.0))-lambda3*(t126-t143+t144+t221+t230+t233-t234+t408+t456-t12*t23*t44-t4*t24*t33*t107*(1.0/2.0)-t4*t12*t44*t111*(1.0/2.0)-t44*t58*t111*t118*(1.0/2.0)-t58*t62*t65*t220*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i, lambda1*(t138+t157+t203-t209+t410+t479-t2*t12*t47*t113*(1.0/2.0)-t2*t33*t34*t107*(1.0/2.0)-t47*t49*t58*t125*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0))-lambda2*(t138+t157+t203-t2*t12*t47*t113*(1.0/2.0)-t2*t33*t34*t107*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i+vnum, lambda1*(t191+t201+t211-t217+t411+t498-t3*t12*t47*t113*(1.0/2.0)-t3*t33*t34*t107*(1.0/2.0)-t47*t58*t92*t125*(1.0/2.0)-t58*t79*t81*t92*t113*(3.0/4.0))-lambda2*(t191+t201+t211-t3*t12*t47*t113*(1.0/2.0)-t3*t33*t34*t107*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i+2*vnum, -lambda2*(-t74+t127+t231+t235+t237-t4*t12*t47*t113*(1.0/2.0)-t4*t33*t34*t107*(1.0/2.0))-lambda1*(t74-t127+t147-t231-t235+t236-t237+t238+t319+t516+t517-t47*t58*t79-t47*t53*t58*t113*(1.0/2.0)-t34*t53*t69*t121*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i, lambda2*(t63+t75+t126-t127-t128+t129-t130+t131-t132+t240+t241-t242-t243-t244)-lambda3*t239+lambda1*(-t75+t127+t128+t130+t132-t240-t241));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i+vnum, lambda1*(t134+t153+t158-t246-t247)-lambda3*t245+lambda2*(t94+t98+t101-t134-t153-t158+t246+t247-t248-t249));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i+2*vnum, lambda1*(t137+t156+t202-t251-t252)-lambda3*t250+lambda2*(t115+t119+t122-t137-t156-t202+t251+t252-t253-t254));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i, -lambda2*(t63+t75-t128-t242+t255-t5*t24*t33*t35)-lambda3*(-t63+t242+t5*t24*t33*t35)+lambda1*(t75-t128+t255));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i+vnum, t280-lambda3*t278-lambda2*(t98-t134+t246-t248+t256-t6*t24*t33*t35*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i+2*vnum, t303-lambda3*t301-lambda2*(t119-t137+t251-t253+t257-t7*t24*t33*t35*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yb_i, t417);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yb_i+vnum, t437);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yb_i+2*vnum, t458);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i, t481);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i+vnum, t500);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i+2*vnum, t519);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i, lambda1*(t133+t134+t135-t256-t270)-lambda3*(t93+t98+t102-t269-t6*t12*t44*t48*(1.0/2.0))+lambda2*(t93+t98+t102-t133-t134-t135+t256-t269+t270-t6*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+vnum, -lambda3*(t126+t167+t185+t187-t242-t6*t24*t33*t86*(1.0/2.0)-t6*t12*t44*t90*(1.0/2.0))+lambda1*(-t75+t127+t184+t186+t188-t271-t272)+lambda2*(t75+t126-t127+t167-t184+t185-t186+t187-t188-t242+t271+t272-t6*t24*t33*t86*(1.0/2.0)-t6*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+2*vnum, lambda1*(t190+t200+t210-t274-t275)-lambda3*t273+lambda2*(t177+t180+t181-t190-t200-t210+t274+t275-t276-t277));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i, t280-lambda2*(t98-t134+t246-t248+t256-t269)-lambda3*t278);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+vnum, -lambda2*(t75+t167-t184-t242+t281-t6*t24*t33*t86)-lambda3*(-t167+t242+t6*t24*t33*t86)+lambda1*(t75-t184+t281));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+2*vnum, t306-lambda3*t304-lambda2*(t180-t190+t274-t276+t282-t7*t24*t33*t86*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yb_i, t419);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yb_i+vnum, t440);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yb_i+2*vnum, t460);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i, t483);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i+vnum, t502);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i+2*vnum, t521);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i, lambda1*(t136+t137+t138-t257-t296)-lambda3*(t114+t119+t123-t295-t7*t12*t44*t48*(1.0/2.0))+lambda2*(t114+t119+t123-t136-t137-t138+t257-t295+t296-t7*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+vnum, lambda1*(t189+t190+t191-t282-t298)-lambda3*(t176+t180+t182-t297-t7*t12*t44*t90*(1.0/2.0))+lambda2*(t176+t180+t182-t189-t190-t191+t282-t297+t298-t7*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+2*vnum, -lambda3*(t126+t219+t228+t230-t242-t7*t24*t33*t107*(1.0/2.0)-t7*t12*t44*t111*(1.0/2.0))+lambda1*(-t75+t127+t227+t229+t231-t299-t300)+lambda2*(t75+t126-t127+t219-t227+t228-t229+t230-t231-t242+t299+t300-t7*t24*t33*t107*(1.0/2.0)-t7*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i, t303-lambda2*(t119-t137+t251-t253+t257-t295)-lambda3*t301);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+vnum, t306-lambda2*(t180-t190+t274-t276+t282-t297)-lambda3*t304);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+2*vnum, -lambda2*(t75+t219-t227-t242+t307-t7*t24*t33*t107)-lambda3*(-t219+t242+t7*t24*t33*t107)+lambda1*(t75-t227+t307));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yb_i, t421);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yb_i+vnum, t442);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yb_i+2*vnum, t463);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i, t485);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i+vnum, t504);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i+2*vnum, t523);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i, t327);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i+vnum, t335);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i+2*vnum, t343);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i, lambda3*(t139-t321+t5*t24*t69*t73)-lambda1*(-t141+t344+t13*t34*t69*t73));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i+vnum, t378);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i+2*vnum, t401);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yb_i, -lambda3*t422);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yb_i+vnum, t444);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yb_i+2*vnum, t465);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i, lambda1*(t147+t151-t355-t34*t51*t69*t73*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i+vnum, -lambda1*t505);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i+2*vnum, -lambda1*t524);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i, lambda3*(t160+t161+t162-t360-t6*t44*t48*t58*(1.0/2.0))-lambda1*(t163+t164+t165-t361-t14*t47*t49*t58*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+vnum, t365-lambda1*(t147+t192+t198-t344+t366-t14*t47*t58*t92*(1.0/2.0)-t14*t34*t69*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+2*vnum, t374);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i, t378);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+vnum, lambda3*(t139-t362+t6*t24*t69*t100)-lambda1*(-t192+t344+t14*t34*t69*t100));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+2*vnum, t405);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yb_i, t425);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yb_i+vnum, -lambda3*t445);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yb_i+2*vnum, t467);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i, -lambda1*t488);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i+vnum, t507);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i+2*vnum, -lambda1*t525);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i, lambda3*(t204+t205+t206-t389-t7*t44*t48*t58*(1.0/2.0))-lambda1*(t207+t208+t209-t390-t15*t47*t49*t58*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+vnum, lambda3*(t212+t213+t214-t391-t7*t44*t58*t90*(1.0/2.0))-lambda1*(t215+t216+t217-t392-t15*t47*t58*t92*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+2*vnum, t396-lambda1*(t147+t232+t238-t344+t397-t15*t47*t58*t113*(1.0/2.0)-t15*t34*t69*t121*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i, t401);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+vnum, t405);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+2*vnum, lambda3*(t139-t393+t7*t24*t69*t121)-lambda1*(-t232+t344+t15*t34*t69*t121));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yb_i, t428);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yb_i+vnum, t448);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yb_i+2*vnum, -lambda3*t468);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i, -lambda1*t490);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i+vnum, -lambda1*t509);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i+2*vnum, t527);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_0_i, -lambda3*(t126+t131+t142-t143+t144+t145-t146+t349-t412+t413-t12*t23*t44-t2*t12*t44*t48*(1.0/2.0)-t44*t48*t58*t71*(1.0/2.0)-t58*t62*t65*t66*(3.0/4.0))+lambda2*(t126+t131+t142+t145-t412-t12*t23*t44-t2*t12*t44*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_0_i+vnum, -lambda3*(t96+t102+t103-t162-t283+t381+t414-t2*t12*t44*t90*(1.0/2.0)-t44*t48*t58*t97*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0))+lambda2*(t96+t102+t103-t283-t2*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_0_i+2*vnum, -lambda3*(t117+t123+t124-t206-t308+t406+t415-t2*t12*t44*t111*(1.0/2.0)-t44*t48*t58*t118*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0))+lambda2*(t117+t123+t124-t308-t2*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xb_i, t417);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xb_i+vnum, t419);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xb_i+2*vnum, t421);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xf_i, -lambda3*t422);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xf_i+vnum, t425);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_xf_i+2*vnum, t428);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_yb_i, lambda3*(t142+t144-t12*t23*t44-t2*t12*t44*t48+t44*t48*t51*t58-t58*t62*t65*t66*(3.0/4.0))+lambda2*(-t142+t432+t2*t12*t44*t48));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_yb_i+vnum, t451+lambda3*(t103+t414+t429-t3*t12*t44*t48*(1.0/2.0)-t2*t12*t44*t90*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i,p_yb_i+2*vnum, t471+lambda3*(t124+t415+t430-t4*t12*t44*t48*(1.0/2.0)-t2*t12*t44*t111*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_0_i, lambda2*(t95+t101+t103-t259-t431)-lambda3*(t95+t101+t103-t259-t329+t351+t429-t431-t44*t58*t71*t90*(1.0/2.0)-t48*t58*t62*t65*t90*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_0_i+vnum, -lambda3*(t126-t143+t144+t169+t187+t193-t194+t382-t432-t433+t434-t3*t12*t44*t90*(1.0/2.0)-t44*t58*t90*t97*(1.0/2.0)-t58*t62*t65*t168*(3.0/4.0))+lambda2*(t126+t169+t187+t193-t432-t433-t3*t12*t44*t90*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_0_i+2*vnum, -lambda3*(t179+t182+t183-t214-t311+t407+t435-t3*t12*t44*t111*(1.0/2.0)-t44*t58*t90*t118*(1.0/2.0)-t58*t62*t65*t90*t111*(3.0/4.0))+lambda2*(t179+t182+t183-t311-t3*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xb_i, t437);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xb_i+vnum, t440);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xb_i+2*vnum, t442);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xf_i, t444);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xf_i+vnum, -lambda3*t445);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_xf_i+2*vnum, t448);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_yb_i, t451+lambda3*(t103+t414+t429-t431-t449-t48*t58*t62*t65*t90*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_yb_i+vnum, lambda3*(t144+t169-t432-t3*t12*t44*t90+t44*t52*t58*t90-t58*t62*t65*t168*(3.0/4.0))+lambda2*(-t169+t432+t3*t12*t44*t90));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+vnum,p_yb_i+2*vnum, t474+lambda3*(t183+t435+t452-t4*t12*t44*t90*(1.0/2.0)-t3*t12*t44*t111*(1.0/2.0)-t58*t62*t65*t90*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_0_i, lambda2*(t116+t122+t124-t261-t453)-lambda3*(t116+t122+t124-t261-t337+t353+t430-t453-t44*t58*t71*t111*(1.0/2.0)-t48*t58*t62*t65*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_0_i+vnum, lambda2*(t178+t181+t183-t287-t454)-lambda3*(t178+t181+t183-t287-t368+t384+t452-t454-t44*t58*t97*t111*(1.0/2.0)-t58*t62*t65*t90*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_0_i+2*vnum, -lambda3*(t126-t143+t144+t221+t230+t233-t234+t408-t432-t455+t456-t4*t12*t44*t111*(1.0/2.0)-t44*t58*t111*t118*(1.0/2.0)-t58*t62*t65*t220*(3.0/4.0))+lambda2*(t126+t221+t230+t233-t432-t455-t4*t12*t44*t111*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xb_i, t458);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xb_i+vnum, t460);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xb_i+2*vnum, t463);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xf_i, t465);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xf_i+vnum, t467);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_xf_i+2*vnum, -lambda3*t468);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_yb_i, t471+lambda3*(t124+t415+t430-t453-t469-t48*t58*t62*t65*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_yb_i+vnum, t474+lambda3*(t183+t435+t452-t454-t472-t58*t62*t65*t90*t111*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yb_i+2*vnum,p_yb_i+2*vnum, lambda3*(t144+t221-t432-t4*t12*t44*t111+t44*t53*t58*t111-t58*t62*t65*t220*(3.0/4.0))+lambda2*(-t221+t432+t4*t12*t44*t111));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i, -lambda1*t477-lambda2*(-t74+t127+t132+t148+t150-t263-t475));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i+vnum, lambda1*(t135+t154+t159-t165-t289+t386+t478-t2*t12*t47*t92*(1.0/2.0)-t47*t49*t58*t104*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0))-lambda2*(t135+t154+t159-t289-t2*t12*t47*t92*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i+2*vnum, lambda1*(t138+t157+t203-t209-t315+t410+t479-t2*t12*t47*t113*(1.0/2.0)-t47*t49*t58*t125*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0))-lambda2*(t138+t157+t203-t315-t2*t12*t47*t113*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i, t481);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i+vnum, t483);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i+2*vnum, t485);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i, lambda1*(t147+t151-t355-t486));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i+vnum, -lambda1*t488);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i+2*vnum, -lambda1*t490);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i, lambda1*(t74-t148+t149-t491+t492-t47*t49*t51*t58)-lambda2*(t74-t148+t492));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i+vnum, -lambda2*t511-lambda1*(t154+t478+t493-t3*t12*t47*t49*(1.0/2.0)-t2*t12*t47*t92*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i+2*vnum, -lambda2*t529-lambda1*(t157+t479+t494-t4*t12*t47*t49*(1.0/2.0)-t2*t12*t47*t113*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i, -lambda2*(t152+t153+t154-t265-t495)+lambda1*(t152+t153+t154-t265-t333+t356+t493-t495-t47*t58*t83*t92*(1.0/2.0)-t49*t58*t79*t81*t92*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i+vnum, -lambda2*(-t74+t127+t188+t195+t197-t291-t496)-lambda1*(t74-t127+t147-t188-t195+t196-t197+t198+t291-t491+t496+t497-t47*t52*t58*t92*(1.0/2.0)-t34*t52*t69*t100*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i+2*vnum, lambda1*(t191+t201+t211-t217-t317+t411+t498-t3*t12*t47*t113*(1.0/2.0)-t47*t58*t92*t125*(1.0/2.0)-t58*t79*t81*t92*t113*(3.0/4.0))-lambda2*(t191+t201+t211-t317-t3*t12*t47*t113*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i, t500);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i+vnum, t502);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i+2*vnum, t504);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i, -lambda1*t505);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i+vnum, t507);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i+2*vnum, -lambda1*t509);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i, -lambda2*t511-lambda1*(t154+t478+t493-t495-t510-t49*t58*t79*t81*t92*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i+vnum, lambda1*(t74-t195+t196-t491+t512-t47*t52*t58*t92)-lambda2*(t74-t195+t512));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i+2*vnum, -lambda2*t531-lambda1*(t201+t498+t513-t4*t12*t47*t92*(1.0/2.0)-t3*t12*t47*t113*(1.0/2.0)-t58*t79*t81*t92*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i, -lambda2*(t155+t156+t157-t267-t514)+lambda1*(t155+t156+t157-t267-t341+t358+t494-t514-t47*t58*t83*t113*(1.0/2.0)-t49*t58*t79*t81*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i+vnum, -lambda2*(t199+t200+t201-t293-t515)+lambda1*(t199+t200+t201-t293-t372+t387+t513-t515-t47*t58*t104*t113*(1.0/2.0)-t58*t79*t81*t92*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i+2*vnum, -lambda2*(-t74+t127+t231+t235+t237-t319-t516)-lambda1*(t74-t127+t147-t231-t235+t236-t237+t238+t319-t491+t516+t517-t47*t53*t58*t113*(1.0/2.0)-t34*t53*t69*t121*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i, t519);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i+vnum, t521);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i+2*vnum, t523);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i, -lambda1*t524);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i+vnum, -lambda1*t525);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i+2*vnum, t527);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i, -lambda2*t529-lambda1*(t157+t479+t494-t514-t528-t49*t58*t79*t81*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i+vnum, -lambda2*t531-lambda1*(t201+t498+t513-t515-t530-t58*t79*t81*t92*t113*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i+2*vnum, lambda1*(t74-t235+t236-t491+t532-t47*t53*t58*t113)-lambda2*(t74-t235+t532));
	}

	for (int si = 0; si < quadTop.bnd3.rows(); si+=4) {
	    int p_0_i = quadTop.bnd3(si), p_xf_i = quadTop.bnd3(si+1), p_yf_i = quadTop.bnd3(si+2), p_xb_i = quadTop.bnd3(si+3);
	    const double pxb_x(x(p_xb_i+0)); const double pxb_y(x(p_xb_i+1*vnum)); const double pxb_z(x(p_xb_i+2*vnum));
	    const double p0_x(x(p_0_i+0)); const double p0_y(x(p_0_i+1*vnum)); const double p0_z(x(p_0_i+2*vnum));
	    const double pxf_x(x(p_xf_i+0)); const double pxf_y(x(p_xf_i+1*vnum)); const double pxf_z(x(p_xf_i+2*vnum));
	    const double pyf_x(x(p_yf_i+0)); const double pyf_y(x(p_yf_i+1*vnum)); const double pyf_z(x(p_yf_i+2*vnum));

	    double lambda1 = lambda(const_cnt);

	    double t2 = p0_x-pxb_x;
		double t3 = p0_y-pxb_y;
		double t4 = p0_z-pxb_z;
		double t5 = p0_x-pyf_x;
		double t6 = p0_y-pyf_y;
		double t7 = p0_z-pyf_z;
		double t8 = p0_x-pxf_x;
		double t9 = p0_y-pxf_y;
		double t10 = p0_z-pxf_z;
		double t11 = t5*t5;
		double t12 = t6*t6;
		double t13 = t7*t7;
		double t14 = t11+t12+t13;
		double t15 = 1.0/sqrt(t14);
		double t16 = t2*t2;
		double t17 = t3*t3;
		double t18 = t4*t4;
		double t19 = t16+t17+t18;
		double t20 = 1.0/sqrt(t19);
		double t21 = t2*t5;
		double t22 = t3*t6;
		double t23 = t4*t7;
		double t24 = t21+t22+t23;
		double t25 = t8*t8;
		double t26 = t9*t9;
		double t27 = t10*t10;
		double t28 = t25+t26+t27;
		double t29 = 1.0/sqrt(t28);
		double t30 = 1.0/pow(t14,3.0/2.0);
		double t31 = t5*t8;
		double t32 = t6*t9;
		double t33 = t7*t10;
		double t34 = t31+t32+t33;
		double t36 = p0_x*2.0;
		double t42 = pxb_x*2.0;
		double t35 = t36-t42;
		double t44 = pxf_x*2.0;
		double t37 = -t36+t44;
		double t39 = pyf_x*2.0;
		double t38 = -t36+t39;
		double t40 = t36-t39;
		double t41 = 1.0/pow(t14,5.0/2.0);
		double t43 = 1.0/pow(t19,3.0/2.0);
		double t45 = 1.0/pow(t28,3.0/2.0);
		double t46 = pxb_x+pyf_x-t36;
		double t47 = pxf_x+pyf_x-t36;
		double t48 = t36-t44;
		double t49 = p0_y*2.0;
		double t50 = pxb_y+pyf_y-t49;
		double t51 = pyf_y*2.0;
		double t52 = t49-t51;
		double t53 = pxf_y+pyf_y-t49;
		double t54 = pxb_y*2.0;
		double t55 = t49-t54;
		double t56 = 1.0/pow(t19,5.0/2.0);
		double t57 = pxf_y*2.0;
		double t58 = t49-t57;
		double t59 = 1.0/pow(t28,5.0/2.0);
		double t60 = p0_z*2.0;
		double t61 = pxb_z+pyf_z-t60;
		double t62 = pyf_z*2.0;
		double t63 = t60-t62;
		double t64 = pxf_z+pyf_z-t60;
		double t65 = pxb_z*2.0;
		double t66 = t60-t65;
		double t67 = pxf_z*2.0;
		double t68 = t60-t67;
		double t69 = t35*t35;
		double t70 = t15*t24*t56*t69*(3.0/4.0);
		double t71 = t15*t43*t46*t55*(1.0/2.0);
		double t72 = t15*t24*t35*t55*t56*(3.0/4.0);
		double t73 = t24*t30*t40*t43*t55*(1.0/4.0);
		double t74 = t15*t43*t46*t66*(1.0/2.0);
		double t75 = t15*t24*t35*t56*t66*(3.0/4.0);
		double t76 = t24*t30*t40*t43*t66*(1.0/4.0);
		double t77 = t15*t34*t45;
		double t78 = t15*t20;
		double t79 = t15*t29;
		double t80 = t29*t30*t34;
		double t81 = t40*t40;
		double t82 = t24*t30*t35*t40*t43*(1.0/4.0);
		double t83 = t30*t34*t40*t45*t48*(1.0/4.0);
		double t84 = t20*t30*t46*t52*(1.0/2.0);
		double t85 = t24*t30*t35*t43*t52*(1.0/4.0);
		double t86 = t20*t24*t40*t41*t52*(3.0/4.0);
		double t87 = t20*t30*t46*t63*(1.0/2.0);
		double t88 = t24*t30*t35*t43*t63*(1.0/4.0);
		double t89 = t20*t24*t40*t41*t63*(3.0/4.0);
		double t90 = t15*t35*t43*t50*(1.0/2.0);
		double t91 = t15*t45*t47*t58*(1.0/2.0);
		double t92 = t20*t30*t40*t50*(1.0/2.0);
		double t93 = t15*t34*t48*t58*t59*(3.0/4.0);
		double t94 = t30*t34*t40*t45*t58*(1.0/4.0);
		double t95 = t15*t20*2.0;
		double t96 = t52*t52;
		double t97 = t55*t55;
		double t98 = t15*t24*t56*t97*(3.0/4.0);
		double t99 = t15*t43*t50*t66*(1.0/2.0);
		double t100 = t15*t24*t55*t56*t66*(3.0/4.0);
		double t101 = t24*t30*t43*t52*t66*(1.0/4.0);
		double t102 = t58*t58;
		double t103 = t20*t24*t41*t96*(3.0/4.0);
		double t104 = t24*t30*t43*t52*t55*(1.0/4.0);
		double t105 = t30*t34*t45*t52*t58*(1.0/4.0);
		double t106 = t20*t30*t50*t63*(1.0/2.0);
		double t107 = t24*t30*t43*t55*t63*(1.0/4.0);
		double t108 = t20*t24*t41*t52*t63*(3.0/4.0);
		double t109 = t15*t35*t43*t61*(1.0/2.0);
		double t110 = t15*t45*t47*t68*(1.0/2.0);
		double t111 = t20*t30*t40*t61*(1.0/2.0);
		double t112 = t15*t34*t48*t59*t68*(3.0/4.0);
		double t113 = t30*t34*t40*t45*t68*(1.0/4.0);
		double t114 = t15*t43*t55*t61*(1.0/2.0);
		double t115 = t15*t45*t53*t68*(1.0/2.0);
		double t116 = t20*t30*t52*t61*(1.0/2.0);
		double t117 = t15*t34*t58*t59*t68*(3.0/4.0);
		double t118 = t30*t34*t45*t52*t68*(1.0/4.0);
		double t119 = t63*t63;
		double t120 = t66*t66;
		double t121 = t15*t24*t56*t120*(3.0/4.0);
		double t122 = t68*t68;
		double t123 = t20*t24*t41*t119*(3.0/4.0);
		double t124 = t24*t30*t43*t63*t66*(1.0/4.0);
		double t125 = t30*t34*t45*t63*t68*(1.0/4.0);
		double t126 = t15*t35*t43*t46*(1.0/2.0);
		double t133 = t15*t24*t43;
		double t136 = t5*t20*t30*t40*(1.0/2.0);
		double t127 = t70+t78+t82+t126-t133-t136-t5*t15*t35*t43*(1.0/2.0);
		double t128 = lambda1*t127;
		double t134 = t5*t15*t43*t55*(1.0/2.0);
		double t137 = t5*t20*t30*t52*(1.0/2.0);
		double t129 = t72+t85+t90-t134-t137;
		double t130 = lambda1*t129;
		double t135 = t5*t15*t43*t66*(1.0/2.0);
		double t138 = t5*t20*t30*t63*(1.0/2.0);
		double t131 = t75+t88+t109-t135-t138;
		double t132 = lambda1*t131;
		double t139 = t6*t15*t35*t43*(1.0/2.0);
		double t140 = t15*t43*t50*t55*(1.0/2.0);
		double t145 = t6*t15*t43*t66*(1.0/2.0);
		double t146 = t6*t20*t30*t63*(1.0/2.0);
		double t141 = t100+t107+t114-t145-t146;
		double t142 = lambda1*t141;
		double t143 = -t72+t134+t139;
		double t144 = lambda1*t143;
		double t147 = t7*t15*t35*t43*(1.0/2.0);
		double t148 = t7*t15*t43*t55*(1.0/2.0);
		double t149 = t15*t43*t61*t66*(1.0/2.0);
		double t150 = -t75+t135+t147;
		double t151 = lambda1*t150;
		double t152 = -t100+t145+t148;
		double t153 = lambda1*t152;
		double t154 = t48*t48;
		double t155 = t15*t34*t59*t154*(3.0/4.0);
		double t156 = t15*t45*t47*t48*(1.0/2.0);
		double t167 = t5*t29*t30*t40*(1.0/2.0);
		double t157 = -t77+t79+t83+t155+t156-t167-t5*t15*t45*t48*(1.0/2.0);
		double t158 = t15*t45*t48*t53*(1.0/2.0);
		double t159 = t30*t34*t45*t48*t52*(1.0/4.0);
		double t164 = t5*t15*t45*t58*(1.0/2.0);
		double t169 = t5*t29*t30*t52*(1.0/2.0);
		double t160 = t93+t158+t159-t164-t169;
		double t161 = t15*t45*t48*t64*(1.0/2.0);
		double t162 = t30*t34*t45*t48*t63*(1.0/4.0);
		double t165 = t5*t15*t45*t68*(1.0/2.0);
		double t171 = t5*t29*t30*t63*(1.0/2.0);
		double t163 = t112+t161+t162-t165-t171;
		double t166 = t8*t15*t45*t48*(1.0/2.0);
		double t168 = t9*t15*t45*t48*(1.0/2.0);
		double t170 = t10*t15*t45*t48*(1.0/2.0);
		double t172 = t6*t15*t45*t48*(1.0/2.0);
		double t173 = t15*t34*t59*t102*(3.0/4.0);
		double t174 = t15*t45*t53*t58*(1.0/2.0);
		double t183 = t6*t29*t30*t52*(1.0/2.0);
		double t175 = -t77+t79+t105+t173+t174-t183-t6*t15*t45*t58*(1.0/2.0);
		double t176 = t15*t45*t58*t64*(1.0/2.0);
		double t177 = t30*t34*t45*t58*t63*(1.0/4.0);
		double t180 = t6*t15*t45*t68*(1.0/2.0);
		double t185 = t6*t29*t30*t63*(1.0/2.0);
		double t178 = t117+t176+t177-t180-t185;
		double t179 = -t93+t164+t172;
		double t181 = t8*t15*t45*t58*(1.0/2.0);
		double t182 = t9*t15*t45*t58*(1.0/2.0);
		double t184 = t10*t15*t45*t58*(1.0/2.0);
		double t186 = t7*t15*t45*t48*(1.0/2.0);
		double t187 = t7*t15*t45*t58*(1.0/2.0);
		double t188 = t15*t34*t59*t122*(3.0/4.0);
		double t189 = t15*t45*t64*t68*(1.0/2.0);
		double t196 = t7*t29*t30*t63*(1.0/2.0);
		double t190 = -t77+t79+t125+t188+t189-t196-t7*t15*t45*t68*(1.0/2.0);
		double t191 = -t112+t165+t186;
		double t192 = -t117+t180+t187;
		double t193 = t8*t15*t45*t68*(1.0/2.0);
		double t194 = t9*t15*t45*t68*(1.0/2.0);
		double t195 = t10*t15*t45*t68*(1.0/2.0);
		double t197 = t20*t24*t41*t81*(3.0/4.0);
		double t198 = t8*t29*t30*t40*(1.0/2.0);
		double t199 = t20*t30*t40*t46*(1.0/2.0);
		double t206 = t2*t15*t35*t43*(1.0/2.0);
		double t219 = t20*t24*t30;
		double t220 = t29*t34*t41*t81*(3.0/4.0);
		double t200 = t78-t79+t80+t82-t83+t166+t197+t198+t199-t206-t219-t220-t2*t20*t30*t40*(1.0/2.0)-t29*t30*t40*t47*(1.0/2.0);
		double t201 = lambda1*t200;
		double t202 = t2*t15*t43*t55*(1.0/2.0);
		double t203 = t8*t29*t30*t52*(1.0/2.0);
		double t204 = t2*t15*t43*t66*(1.0/2.0);
		double t205 = t8*t29*t30*t63*(1.0/2.0);
		double t207 = t6*t20*t30*t40*(1.0/2.0);
		double t208 = -t73+t202+t207;
		double t209 = lambda1*t208;
		double t210 = t7*t20*t30*t40*(1.0/2.0);
		double t211 = -t76+t204+t210;
		double t212 = lambda1*t211;
		double t213 = t79+t83-t166-t167;
		double t214 = lambda1*t213;
		double t215 = t6*t29*t30*t40*(1.0/2.0);
		double t216 = -t94+t181+t215;
		double t217 = t7*t29*t30*t40*(1.0/2.0);
		double t218 = -t113+t193+t217;
		double t221 = t9*t29*t30*t40*(1.0/2.0);
		double t222 = t10*t29*t30*t40*(1.0/2.0);
		double t223 = t3*t15*t35*t43*(1.0/2.0);
		double t224 = t9*t29*t30*t52*(1.0/2.0);
		double t225 = t20*t30*t50*t52*(1.0/2.0);
		double t226 = t3*t15*t43*t66*(1.0/2.0);
		double t227 = t9*t29*t30*t63*(1.0/2.0);
		double t228 = -t85+t137+t223;
		double t229 = lambda1*t228;
		double t230 = t78+t104-t6*t20*t30*t52*(1.0/2.0)-t3*t15*t43*t55*(1.0/2.0);
		double t231 = t7*t20*t30*t52*(1.0/2.0);
		double t232 = -t101+t226+t231;
		double t233 = lambda1*t232;
		double t234 = -t159+t168+t169;
		double t235 = t79+t105-t182-t183;
		double t236 = lambda1*t235;
		double t237 = t7*t29*t30*t52*(1.0/2.0);
		double t238 = -t118+t194+t237;
		double t239 = t86+t203+t221-t3*t20*t30*t40*(1.0/2.0)-t2*t20*t30*t52*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0);
		double t240 = t10*t29*t30*t52*(1.0/2.0);
		double t241 = t4*t15*t35*t43*(1.0/2.0);
		double t242 = t4*t15*t43*t55*(1.0/2.0);
		double t243 = t10*t29*t30*t63*(1.0/2.0);
		double t244 = t20*t30*t61*t63*(1.0/2.0);
		double t245 = -t88+t138+t241;
		double t246 = lambda1*t245;
		double t247 = -t107+t146+t242;
		double t248 = lambda1*t247;
		double t249 = t78+t124-t7*t20*t30*t63*(1.0/2.0)-t4*t15*t43*t66*(1.0/2.0);
		double t250 = -t162+t170+t171;
		double t251 = -t177+t184+t185;
		double t252 = t79+t125-t195-t196;
		double t253 = lambda1*t252;
		double t254 = t89+t205+t222-t4*t20*t30*t40*(1.0/2.0)-t2*t20*t30*t63*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0);
		double t255 = t108+t227+t240-t4*t20*t30*t52*(1.0/2.0)-t3*t20*t30*t63*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0);

		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i, -lambda1*(t70+t77+t80+t95-t15*t29*2.0-t20*t24*t30-t15*t24*t43+t20*t30*t40*t46+t15*t35*t43*t46-t29*t30*t40*t47-t15*t45*t47*t48-t29*t34*t41*t81*(3.0/4.0)+t20*t24*(t38*t38)*t41*(3.0/4.0)-t15*t34*(t37*t37)*t59*(3.0/4.0)+t24*t30*t35*t40*t43*(1.0/2.0)-t30*t34*t40*t45*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i+vnum, -lambda1*(t71+t72+t73+t84+t85+t86+t90+t92-t29*t30*t40*t53*(1.0/2.0)-t29*t30*t47*t52*(1.0/2.0)-t15*t45*t48*t53*(1.0/2.0)-t15*t45*t47*t58*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)-t30*t34*t40*t45*t58*(1.0/4.0)-t30*t34*t45*t48*t52*(1.0/4.0)-t15*t34*t48*t58*t59*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_0_i+2*vnum, -lambda1*(t74+t75+t76+t87+t88+t89+t109+t111-t29*t30*t40*t64*(1.0/2.0)-t29*t30*t47*t63*(1.0/2.0)-t15*t45*t48*t64*(1.0/2.0)-t15*t45*t47*t68*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)-t30*t34*t40*t45*t68*(1.0/4.0)-t30*t34*t45*t48*t63*(1.0/4.0)-t15*t34*t48*t59*t68*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i, t128);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i+vnum, lambda1*(t71+t72+t73-t6*t20*t30*t40*(1.0/2.0)-t6*t15*t35*t43*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xb_i+2*vnum, lambda1*(t74+t75+t76-t7*t20*t30*t40*(1.0/2.0)-t7*t15*t35*t43*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i, -lambda1*t157);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i+vnum, -lambda1*(t91+t93+t94-t6*t29*t30*t40*(1.0/2.0)-t6*t15*t45*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_xf_i+2*vnum, -lambda1*(t110+t112+t113-t7*t29*t30*t40*(1.0/2.0)-t7*t15*t45*t48*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i, t201);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i+vnum, lambda1*(t84+t85+t86+t168+t221-t3*t20*t30*t40*(1.0/2.0)-t3*t15*t35*t43*(1.0/2.0)-t29*t30*t47*t52*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)-t30*t34*t45*t48*t52*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i,p_yf_i+2*vnum, lambda1*(t87+t88+t89+t170+t222-t4*t20*t30*t40*(1.0/2.0)-t4*t15*t35*t43*(1.0/2.0)-t29*t30*t47*t63*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)-t30*t34*t45*t48*t63*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i, -lambda1*(t71+t72+t73+t84+t85+t86+t90-t91+t92-t93-t94-t29*t30*t40*t53*(1.0/2.0)-t29*t30*t47*t52*(1.0/2.0)-t15*t45*t48*t53*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)-t30*t34*t45*t48*t52*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i+vnum, -lambda1*(t77+t80+t95+t98+t103-t15*t29*2.0-t20*t24*t30-t15*t24*t43+t20*t30*t50*t52+t15*t43*t50*t55-t29*t30*t52*t53-t15*t45*t53*t58-t29*t34*t41*t96*(3.0/4.0)-t15*t34*t59*t102*(3.0/4.0)+t24*t30*t43*t52*t55*(1.0/2.0)-t30*t34*t45*t52*t58*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_0_i+2*vnum, -lambda1*(t99+t100+t101+t106+t107+t108+t114+t116-t29*t30*t52*t64*(1.0/2.0)-t29*t30*t53*t63*(1.0/2.0)-t15*t45*t53*t68*(1.0/2.0)-t15*t45*t58*t64*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)-t30*t34*t45*t52*t68*(1.0/4.0)-t30*t34*t45*t58*t63*(1.0/4.0)-t15*t34*t58*t59*t68*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i, t130);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+vnum, lambda1*(t78+t98+t104+t140-t15*t24*t43-t6*t20*t30*t52*(1.0/2.0)-t6*t15*t43*t55*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xb_i+2*vnum, lambda1*(t99+t100+t101-t7*t20*t30*t52*(1.0/2.0)-t7*t15*t43*t55*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i, -lambda1*t160);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+vnum, -lambda1*t175);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_xf_i+2*vnum, -lambda1*(t115+t117+t118-t7*t29*t30*t52*(1.0/2.0)-t7*t15*t45*t58*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i, lambda1*(t73+t86+t92-t94+t181+t203-t2*t20*t30*t52*(1.0/2.0)-t2*t15*t43*t55*(1.0/2.0)-t29*t30*t40*t53*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i+vnum, lambda1*(t78-t79+t80+t103+t104-t105+t182+t224+t225-t20*t24*t30-t3*t20*t30*t52*(1.0/2.0)-t3*t15*t43*t55*(1.0/2.0)-t29*t30*t52*t53*(1.0/2.0)-t29*t34*t41*t96*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+vnum,p_yf_i+2*vnum, lambda1*(t106+t107+t108+t184+t240-t4*t20*t30*t52*(1.0/2.0)-t4*t15*t43*t55*(1.0/2.0)-t29*t30*t53*t63*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)-t30*t34*t45*t58*t63*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i, -lambda1*(t74+t75+t76+t87+t88+t89+t109-t110+t111-t112-t113-t29*t30*t40*t64*(1.0/2.0)-t29*t30*t47*t63*(1.0/2.0)-t15*t45*t48*t64*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)-t30*t34*t45*t48*t63*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+vnum, -lambda1*(t99+t100+t101+t106+t107+t108+t114-t115+t116-t117-t118-t29*t30*t52*t64*(1.0/2.0)-t29*t30*t53*t63*(1.0/2.0)-t15*t45*t58*t64*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)-t30*t34*t45*t58*t63*(1.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_0_i+2*vnum, -lambda1*(t77+t80+t95+t121+t123-t15*t29*2.0-t20*t24*t30-t15*t24*t43+t20*t30*t61*t63+t15*t43*t61*t66-t29*t30*t63*t64-t15*t45*t64*t68-t29*t34*t41*t119*(3.0/4.0)-t15*t34*t59*t122*(3.0/4.0)+t24*t30*t43*t63*t66*(1.0/2.0)-t30*t34*t45*t63*t68*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i, t132);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+vnum, t142);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xb_i+2*vnum, lambda1*(t78+t121+t124+t149-t15*t24*t43-t7*t20*t30*t63*(1.0/2.0)-t7*t15*t43*t66*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i, -lambda1*t163);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+vnum, -lambda1*t178);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_xf_i+2*vnum, -lambda1*t190);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i, lambda1*(t76+t89+t111-t113+t193+t205-t2*t20*t30*t63*(1.0/2.0)-t2*t15*t43*t66*(1.0/2.0)-t29*t30*t40*t64*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i+vnum, lambda1*(t101+t108+t116-t118+t194+t227-t3*t20*t30*t63*(1.0/2.0)-t3*t15*t43*t66*(1.0/2.0)-t29*t30*t52*t64*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_0_i+2*vnum,p_yf_i+2*vnum, lambda1*(t78-t79+t80+t123+t124-t125+t195+t243+t244-t20*t24*t30-t4*t20*t30*t63*(1.0/2.0)-t4*t15*t43*t66*(1.0/2.0)-t29*t30*t63*t64*(1.0/2.0)-t29*t34*t41*t119*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i, t128);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i+vnum, t130);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_0_i+2*vnum, t132);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i, lambda1*(-t70+t133+t5*t15*t35*t43));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i+vnum, t144);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_xb_i+2*vnum, t151);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i, -lambda1*(t78+t82-t136-t2*t15*t35*t43*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i+vnum, t229);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i,p_yf_i+2*vnum, t246);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i, lambda1*(t71+t72+t73-t139-t6*t20*t30*t40*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+vnum, lambda1*(t78+t98+t104-t133+t140-t6*t20*t30*t52*(1.0/2.0)-t6*t15*t43*t55*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_0_i+2*vnum, t142);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i, t144);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+vnum, lambda1*(-t98+t133+t6*t15*t43*t55));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_xb_i+2*vnum, t153);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i, t209);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i+vnum, -lambda1*t230);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+vnum,p_yf_i+2*vnum, t248);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i, lambda1*(t74+t75+t76-t147-t7*t20*t30*t40*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+vnum, lambda1*(t99+t100+t101-t148-t7*t20*t30*t52*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_0_i+2*vnum, lambda1*(t78+t121+t124-t133+t149-t7*t20*t30*t63*(1.0/2.0)-t7*t15*t43*t66*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i, t151);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+vnum, t153);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_xb_i+2*vnum, lambda1*(-t121+t133+t7*t15*t43*t66));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i, t212);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i+vnum, t233);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xb_i+2*vnum,p_yf_i+2*vnum, -lambda1*t249);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i, -lambda1*t157);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i+vnum, -lambda1*t160);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_0_i+2*vnum, -lambda1*t163);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i, -lambda1*(t77-t155+t5*t15*t45*t48));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i+vnum, -lambda1*t179);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_xf_i+2*vnum, -lambda1*t191);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i, t214);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i+vnum, -lambda1*t234);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i,p_yf_i+2*vnum, -lambda1*t250);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i, -lambda1*(t91+t93+t94-t172-t6*t29*t30*t40*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+vnum, -lambda1*t175);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_0_i+2*vnum, -lambda1*t178);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i, -lambda1*t179);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+vnum, -lambda1*(t77-t173+t6*t15*t45*t58));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_xf_i+2*vnum, -lambda1*t192);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i, -lambda1*t216);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i+vnum, t236);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+vnum,p_yf_i+2*vnum, -lambda1*t251);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i, -lambda1*(t110+t112+t113-t186-t7*t29*t30*t40*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+vnum, -lambda1*(t115+t117+t118-t187-t7*t29*t30*t52*(1.0/2.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_0_i+2*vnum, -lambda1*t190);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i, -lambda1*t191);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+vnum, -lambda1*t192);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_xf_i+2*vnum, -lambda1*(t77-t188+t7*t15*t45*t68));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i, -lambda1*t218);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i+vnum, -lambda1*t238);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_xf_i+2*vnum,p_yf_i+2*vnum, t253);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i, t201);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i+vnum, lambda1*(t73+t86+t92-t94+t181-t202+t203-t2*t20*t30*t52*(1.0/2.0)-t29*t30*t40*t53*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_0_i+2*vnum, lambda1*(t76+t89+t111-t113+t193-t204+t205-t2*t20*t30*t63*(1.0/2.0)-t29*t30*t40*t64*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i, -lambda1*(t78+t82-t136-t206));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i+vnum, t209);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xb_i+2*vnum, t212);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i, t214);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i+vnum, -lambda1*t216);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_xf_i+2*vnum, -lambda1*t218);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i, -lambda1*(t80+t197-t219-t220-t2*t20*t30*t40+t8*t29*t30*t40));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i+vnum, -lambda1*t239);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i,p_yf_i+2*vnum, -lambda1*t254);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i, lambda1*(t84+t85+t86-t159+t168+t221-t223-t3*t20*t30*t40*(1.0/2.0)-t29*t30*t47*t52*(1.0/2.0)-t29*t34*t40*t41*t52*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i+vnum, lambda1*(t78-t79+t80+t103+t104-t105+t182-t219+t224+t225-t3*t20*t30*t52*(1.0/2.0)-t3*t15*t43*t55*(1.0/2.0)-t29*t30*t52*t53*(1.0/2.0)-t29*t34*t41*t96*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_0_i+2*vnum, lambda1*(t101+t108+t116-t118+t194-t226+t227-t3*t20*t30*t63*(1.0/2.0)-t29*t30*t52*t64*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i, t229);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i+vnum, -lambda1*t230);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xb_i+2*vnum, t233);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i, -lambda1*t234);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i+vnum, t236);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_xf_i+2*vnum, -lambda1*t238);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i, -lambda1*t239);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i+vnum, -lambda1*(t80+t103-t219-t3*t20*t30*t52+t9*t29*t30*t52-t29*t34*t41*t96*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+vnum,p_yf_i+2*vnum, -lambda1*t255);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i, lambda1*(t87+t88+t89-t162+t170+t222-t241-t4*t20*t30*t40*(1.0/2.0)-t29*t30*t47*t63*(1.0/2.0)-t29*t34*t40*t41*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i+vnum, lambda1*(t106+t107+t108-t177+t184+t240-t242-t4*t20*t30*t52*(1.0/2.0)-t29*t30*t53*t63*(1.0/2.0)-t29*t34*t41*t52*t63*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_0_i+2*vnum, lambda1*(t78-t79+t80+t123+t124-t125+t195-t219+t243+t244-t4*t20*t30*t63*(1.0/2.0)-t4*t15*t43*t66*(1.0/2.0)-t29*t30*t63*t64*(1.0/2.0)-t29*t34*t41*t119*(3.0/4.0)));
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i, t246);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i+vnum, t248);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xb_i+2*vnum, -lambda1*t249);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i, -lambda1*t250);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i+vnum, -lambda1*t251);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_xf_i+2*vnum, t253);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i, -lambda1*t254);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i+vnum, -lambda1*t255);
		lambda_hessian_IJV[ijv_idx++] = Eigen::Triplet<double>(p_yf_i+2*vnum,p_yf_i+2*vnum, -lambda1*(t80+t123-t219-t4*t20*t30*t63+t10*t29*t30*t63-t29*t34*t41*t119*(3.0/4.0)));
	 }
}